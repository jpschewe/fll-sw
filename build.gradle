// -*- java -*-

import com.github.spotbugs.snom.SpotBugsTask

import org.myire.munge.TransformTask

import org.apache.tools.ant.filters.FixCrLfFilter;

buildscript {
    repositories {
        jcenter()
        gradlePluginPortal()
    }
    dependencies {
      // needs to use old plugin mechanism otherwise I can't set the extra properties   
      classpath(group: "com.cinnober.gradle", name: "semver-git", version: "3.0.0")
    }
    configurations.classpath {
      exclude(group: "com.google.guava", module: "guava")
    }
}    

plugins {
    id "java"
    id "distribution"
    id "com.dorongold.task-tree" version "1.5"
    id "org.unbroken-dome.test-sets" version "3.0.1"
    id "eclipse"
    id "org.kordamp.gradle.markdown" version "2.2.0" // markdownToHtml        
    id "com.github.spotbugs" version "4.5.1"
    id "org.myire.munge" version "1.0" // transformer for spotbugs XML
    id "de.aaschmid.cpd" version "3.1"
    id "edu.sc.seis.launch4j" version "2.4.8"
    id "com.gorylenko.gradle-git-properties" version "2.2.4"
    id "com.github.ben-manes.versions" version "0.33.0" // adds dependencyUpdates task
    id "de.undercouch.download" version "4.1.1" // file download
    id "checkstyle"
        
    // Checker Framework pluggable type-checking
    id "org.checkerframework" version "0.5.11"
    
    // code coverage
    id "jacoco"
}

// needs to use old plugin mechanism otherwise I can't set nextVersion and snapshotSuffix
ext.nextVersion = "patch"
ext.snapshotSuffix = "beta.<count>+g<sha><dirty>"
// optionally: ext.dirtyMarker = "-dirty" (default) replaces <dirty> in snapshotSuffix
// optionally: ext.gitDescribeArgs = '--match *[0-9].[0-9]*.[0-9]*' (default) or other arguments for git describe.
apply plugin: "com.cinnober.gradle.semver-git"

repositories {
    mavenLocal()
    jcenter()
}

configurations {
    jspc
}

eclipse {
    classpath {
        file {
            withXml {
                def node = it.asNode()
                // add web as resource entry
                node.appendNode( "classpathentry", [ kind: "src", path: "src/main/web", output: "bin/web"]) 
            }
                                                                                                                                    
            // remove entries added due to issue with testsets                                                                      
            // https://github.com/unbroken-dome/gradle-testsets-plugin/issues/77                                                    
            whenMerged {                                                                                                            
                entries.removeAll{it.kind == "lib" && (it.path.endsWith("build/classes/java/test") || it.path.endsWith("build/resources/test"))}
            }                                                                                                                       
        }
    }
}

dependencies {
  jspc("org.apache.ant:ant:1.10.9")
}

testSets {
    integrationTest
}
integrationTest {
    // have selenium log through log4j
    systemProperty("java.util.logging.manager", "org.apache.logging.log4j.jul.LogManager")
}
// don't depend on check so that users can skip these on a basic check. check.dependsOn integrationTest
integrationTest.mustRunAfter test

test {
    useJUnitPlatform()
    ignoreFailures = Boolean.getBoolean("test.ignoreFailures") 
}
integrationTest {
    useJUnitPlatform()
    ignoreFailures = Boolean.getBoolean("test.ignoreFailures") 
}
repositories {
    //mavenLocal()
    jcenter()
}

ext {
    jackson_version = "2.11.3"
    slf4j_version = "1.7.30"
    tomcat_version = "9.0.39"
    poi_version = "4.1.2"
    junit_version = "5.7.0"
    log4j_version = "2.13.3"
    spotbugs_version = "4.1.4"

    web_build_dir = new File(project.buildDir, "web")
    documentation_build_dir = new File(project.buildDir, "gen-documentation")    
    
    jspSrc = "src/main/web"
    jspJavaSrc = new File(project.buildDir, "jsp-java-source")
    jspPackage = "fll.jsp"
    jspJavaClasses = new File(project.buildDir, "jsp-java-classes")

    mainClassName = "fll.Launcher"
    
    // java download urls
    java_download_base = project.buildDir.toPath().resolve("bundled-java")
    
    java_windows_url = "https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_windows-x64_bin.zip"
    java_windows_checksum = "a30bed3d6d62f6ae1052aaf3c6956aaee8e3deb2f50f155575112f3f29411fba"
    
    java_mac_url = "https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_osx-x64_bin.tar.gz"
    java_mac_checksum = "675a739ab89b28a8db89510f87cb2ec3206ec6662fb4b4996264c16c72cdd2a1"
    
    java_linux_url = "https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_linux-x64_bin.tar.gz"
    java_linux_checksum = "75998a6ebf477467aa5fb68227a67733f0e77e01f737d4dfbc01e617e59106ed"
}


group = "fll"

java {
    // set version of Java that the source confirms to. 
    // The bytecode will be for this version of Java as well, unless targetCompatibility is specified.
    sourceCompatibility = JavaVersion.VERSION_11
}

dependencies {
  implementation(group: "org.apache.tomcat.embed", name: "tomcat-embed-core", version: project.tomcat_version)
  implementation(group: "org.apache.tomcat.embed", name: "tomcat-embed-jasper", version: project.tomcat_version)
  implementation(group: "org.apache.tomcat.embed", name: "tomcat-embed-websocket", version: project.tomcat_version)
  implementation(group: "org.apache.tomcat", name: "tomcat-jasper", version: project.tomcat_version)
  implementation(group: "org.apache.tomcat", name: "tomcat-jasper-el", version: project.tomcat_version)
  implementation(group: "org.apache.tomcat", name: "tomcat-jsp-api", version: project.tomcat_version)
  implementation(group: "javax.servlet", name: "javax.servlet-api", version: "4.0.1")
  runtimeOnly(group: "javax.servlet", name: "jstl", version: "1.2")

  implementation(group: "org.apache.commons", name: "commons-lang3", version: "3.11")
  implementation(group: "commons-cli", name: "commons-cli", version: "1.4")
  implementation(group: "org.hsqldb", name: "hsqldb", version: "2.5.1")
    
  runtimeOnly(group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: project.log4j_version)
  runtimeOnly(group: "org.apache.logging.log4j", name: "log4j-jcl", version: project.log4j_version)
  implementation(group: "org.apache.logging.log4j", name: "log4j-api", version: project.log4j_version)
  implementation(group: "org.apache.logging.log4j", name: "log4j-core", version: project.log4j_version)
  implementation(group: "org.apache.logging.log4j", name: "log4j-web", version: project.log4j_version)
    
  implementation(group: "org.slf4j", name: "slf4j-api", version: project.slf4j_version)
    
  implementation(group: "org.apache.poi", name: "poi-ooxml", version: project.poi_version)
    
  implementation(group: "com.github.spotbugs", name: "spotbugs-annotations", version: project.spotbugs_version)
  compileOnly(group: "net.jcip", name: "jcip-annotations", version: "1.0")
  compileOnly(group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2")
    
  implementation(group: "com.fasterxml.jackson.core", name: "jackson-databind", version: project.jackson_version)
  implementation(group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: project.jackson_version)
  implementation(group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jdk8", version: project.jackson_version)

  implementation(group: "net.sourceforge.schemaspy", name: "schemaspy", version: "5.0.0")
            
  implementation(group: "dnsjava", name: "dnsjava", version: "3.3.1")
    
  implementation(group: "commons-fileupload", name: "commons-fileupload", version: "1.4")
    
  implementation(group: "org.apache.tika", name: "tika-core", version: "1.24.1")
    
  implementation(group: "com.diffplug.durian", name: "durian-core", version: "1.2.0")
        
  implementation(group: "it.sauronsoftware", name: "junique", version: "1.0.4")
            
  implementation(group: "com.googlecode.log4jdbc", name: "log4jdbc", version: "1.2")
    
  implementation(group: "net.java.linoleum", name: "jlfgr", version: "1_0")
        
  implementation(group: "com.opencsv", name: "opencsv", version: "5.3")
    
  implementation(group: "net.mtu.eggplant", name: "JonsInfra", version: "3.0.0"   )
    
  implementation(group: "com.google.guava", name: "guava", version: "30.0-jre")
    
  implementation(group: "org.apache.xmlgraphics", name: "fop", version: "2.5") {
    // only needed for BMP and TIFF formats
    exclude(group: "com.sun.media", module: "jai-codec")
    
    // references old version of the servlet API
    exclude(group: "javax.servlet", module: "servlet-api")
    
    // xml APIs are part of the JDK
    exclude(group: "xml-apis", module: "xml-apis")
  }
  
  implementation(group: "org.checkerframework", name: "checker-qual", version: "3.7.0")
    
  implementation(group: "org.apache.pdfbox", name: "pdfbox", version: "2.0.21")
  
  testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.junit_version)
  testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params", version: project.junit_version)
  testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.junit_version)
    
  testImplementation(group: "org.hamcrest", name: "hamcrest", version: "2.2")
    
    // allow integration tests to reference code in the test directory
  integrationTestImplementation(sourceSets.test.output)
        
  integrationTestImplementation(group: "org.easytesting", name: "fest-swing", version: "1.2.1")
  integrationTestImplementation(group: "net.sourceforge.htmlunit", name: "htmlunit", version: "2.44.0") {
      
    // xml APIs are part of the JDK
    exclude(group: "xml-apis", module: "xml-apis")
  }
  integrationTestImplementation(group: "org.seleniumhq.selenium", name: "selenium-server", version: "3.141.59")
  integrationTestImplementation(group: "io.github.bonigarcia", name: "webdrivermanager", version: "4.2.2")
  
  // make selenium log to log4j
  integrationTestImplementation(group: "org.apache.logging.log4j", name: "log4j-jul", version: project.log4j_version)
      
}

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
}

javadoc {
    failOnError = false
    options.addStringOption('Xmaxwarns', '10000')
}

compileJava {
    options.compilerArgs << '-Xmaxwarns' << '10000'
}

tasks.register("distributionDependencies") {
    doFirst {
      println("Distribution dependnecies")
    }
}
distTar.dependsOn(distributionDependencies)
distZip.dependsOn(distributionDependencies)
installDist.dependsOn(distributionDependencies)

// copy webapp files
tasks.register("copyWeb", Copy) {
  from("src/main/web")
  into(project.web_build_dir)
}
distributionDependencies.dependsOn(copyWeb)
integrationTest.dependsOn(copyWeb)

// Configure the distribution plugin instead of using the application plugin so that
// the web application classes stay outside of a jar file and Tomcat will properly
// process the annotations. For some reason Tomcat won't process the annotations
// inside of a jar file.
def baseDistribution = copySpec {
    from("src/main/root-docs/")
    
    from(sourceSets.main.output) {
        into "classes"
    }
    from(configurations.runtimeClasspath) {
        into "lib"
    }
        
    // web elements
    from(project.web_build_dir) {
        into "web"
        exclude "**/WEB-INF/flldb*"
    }
    
    // documentation
    from(project.documentation_build_dir) {
        into "web/documentation"
    }
    from(javadoc) {
        into "web/documentation/api"
    }
    from("$buildDir/reports/tests/") {
        into "web/documentation/reports"
    }
    from("$buildDir/reports/spotbugs/") {
        into "web/documentation/reports/spotbugs"
    }
    from("$buildDir/reports/checkstyle/") {
        into "web/documentation/reports/checkstyle"
    }
    from("$buildDir/reports/jacoco/test/html") {
        into "web/documentation/reports/coverage"
    }
}
// make sure that the launch script has Unix line endings
def launchScriptDist = copySpec {
    from("src/main/launch-script/")
    filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

distributions {
    main {
        contents {            
            with(baseDistribution)
            with(launchScriptDist)
            from(createExe.dest)
        }
    }
}

// create run task since we aren't using the application plugin
tasks.register("run", JavaExec) {
    dependsOn(copyWeb)
    dependsOn(classes)
    
    classpath = sourceSets.main.runtimeClasspath
        
    main = project.mainClassName
}


// convert markdown documentation and copy non-markdown documentation
markdownToHtml {
        sourceDir = file("src/main/documentation")
        outputDir = project.documentation_build_dir
        autoLinks = true
        fencedCodeBlocks = true
        definitionLists = true
        tables = true   
}
distributionDependencies.dependsOn(markdownToHtml)


// write log4j config for JspC
tasks.register("writeJspcProperties", WriteProperties) {
    outputFile = new File(project.buildDir, "log4j.jspc.properties")
    property("log4j.rootLogger", "WARN, jspout")
    property("log4j.logger.org.apache", "INFO, jspout")
    property("log4j.appender.jspout", "org.apache.log4j.ConsoleAppender")
    property("log4j.appender.jspout.target", "System.out")
    property("log4j.appender.jspout.layout", "org.apache.log4j.PatternLayout")
    property("log4j.appender.jspout.layout.ConversionPattern", "%d [%C] %m%n")
}

// call JspC to test compile the JSP files
// the output isn't used other than to check if there are errors in the build
tasks.register("jspToJava", JavaExec) {
    dependsOn(compileJava)
    dependsOn(writeJspcProperties)

    group = "Build"
    description = "Convert JSP files to Java"

    inputs.dir(jspSrc)
    outputs.dir(jspJavaSrc)

    File xmlPartial = file("$jspJavaSrc/WEB-INF/web.xml.partial")

    doFirst {
        // Create the target WEB-INF folder so the JspC can create the web.xml.partial
        File webInfFolder = xmlPartial.getParentFile()
        if (!webInfFolder.exists()) {
            webInfFolder.mkdirs()
        }
    }

    classpath = configurations.jspc + sourceSets.main.runtimeClasspath
    main = "org.apache.jasper.JspC"
    jvmArgs = ["-Dlog4j.configuration=$buildDir/log4j.jspc.properties"] //, "-Dlog4j.debug"] 

    args "-webapp", jspSrc,
            "-d", jspJavaSrc,
            "-p", jspPackage,
            "-webxmlencoding", "UTF-8",
            "-webinc", xmlPartial.absolutePath

    doLast {
        // Merge the partial XML with the original
        String originalXML = file("$jspSrc/WEB-INF/web.xml").text
        String xmlToMerge = xmlPartial.text
        String mergedXML = originalXML.replaceFirst("(?s)(<web-app.*?>)", "\$1" + xmlToMerge)
        file("$jspJavaSrc/WEB-INF/web.xml").text = mergedXML
    }
}

tasks.register("jspToClasses", JavaCompile) {
    dependsOn(jspToJava)
    
    group = "Build"
    description = "Test compile JSP files"

    source(jspJavaSrc)
    destinationDir(jspJavaClasses)

    classpath = configurations.jspc + sourceSets.main.runtimeClasspath
}
check.dependsOn(jspToClasses)


cpdCheck {
    // allow the build to continue, catch this in CI as warnings
    ignoreFailures = true
}

tasks.register("sloccount", Exec) {
    group = "Documentation"
    description = "Count number of lines of code"

    commandLine("cloc", "--by-file", "--xml", "--out", "$buildDir/reports/sloccount/cloc.xml", "src")
}

tasks.register("renderWorkflows") {
    dependsOn(markdownToHtml)

    group = "Documentation"
    description = "Render workflows as PDFs"

    def inputFiles = []
    def outputFiles = []
    def ioMap = [:]

    fileTree("src/main/documentation/workflows").matching{include "**/*.dot"}.visit{FileVisitDetails details ->
        if(!details.directory) {
            def inFile = details.file.path
            def outFile = project.documentation_build_dir.path + "/workflows/" + details.file.name + ".pdf"
            inputFiles << inFile
            outputFiles << outFile
            ioMap.put(inFile, outFile)
        }
    }
    
    inputs.files(inputFiles)
    outputs.files(outputFiles)
    
    doLast {
      ioMap.each{ inFile, outFile ->
                        exec{
          commandLine("dot", "-Tpdf", "-o", outFile, inFile)
                        }
      }
    }
}
distributionDependencies.dependsOn(renderWorkflows)

tasks.register("createDatabaseDiagram", JavaExec) {
    dependsOn(markdownToHtml)
    
    group = "Documentation"
    description = "Creates a diagram of the database"
    
    classpath = sourceSets.main.runtimeClasspath
    
    main = "fll.db.GenerateDatabaseDiagram"
    args (new File(project.documentation_build_dir, "database-diagram").absolutePath)
}
distributionDependencies.dependsOn(createDatabaseDiagram)

createExe {
    mainClassName = project.mainClassName
    icon = "${projectDir}/src/main/resources/fll/resources/fll-sw.ico"
    
    dontWrapJar = true
    errTitle = "FLL-SW"
    classpath = ["%EXEDIR%/classes", "%EXEDIR%/lib/*.jar"]
    // need to specify a jar file that we know will exist as a dependency, 
    // otherwise launch4j will look for the jar file created from the build
    jar = "lib/log4j-core-" + project.log4j_version + ".jar"
    
    maxHeapPercent = 75        
    
    fileDescription = "FIRST Lego League Scoring Software"
    productName = "FLL-SW"
    copyright = "GPL"
    
    bundledJrePath = "jdk-12.0.2"
    bundledJre64Bit = true
    bundledJreAsFallback = false

    // should not need to specify this https://github.com/TheBoegl/gradle-launch4j/issues/88        
    jreMinVersion = project.targetCompatibility
    
    // for debugging classpath information        
    //headerType = "console"
    //jvmOptions = ["-Dlog4j2.debug=true"]
}
distributionDependencies.dependsOn(createExe)


configurations {
    spotbugsStylesheets { transitive = false }
}

dependencies {
  spotbugsStylesheets("com.github.spotbugs:spotbugs:$project.spotbugs_version")
}

spotbugs {
    toolVersion = project.spotbugs_version
    
    // allow the build to continue, catch this in CI as warnings
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("spotbugs-filters.xml")
}

tasks.withType(SpotBugsTask) {
    def stylesheetName = "fancy-hist.xsl"

    distributionDependencies.dependsOn("${it.name}")
    
    def xmlOutput = it.outputs.files.singleFile
    def htmlOutput = file(xmlOutput.absolutePath.replaceFirst(/\.xml$/, ".html"))
    
    tasks.register("${it.name}HtmlReport", TransformTask) {
        saxon {
            source(xmlOutput)
            template(resources.text.fromArchiveEntry(configurations.spotbugsStylesheets, stylesheetName))
            outputFile = htmlOutput
        }       
    }
    it.finalizedBy("${it.name}HtmlReport")
}

gitProperties {
    gitPropertiesDir = "${buildDir}/resources/main/fll/resources"
}

tasks.register("writeLaunchJar", Jar) {
    destinationDirectory = project.buildDir
    archiveFileName = "fll-sw.jar"
    manifest {
        attributes(
        "Implementation-Title": project.name,
        "Implementation-Version": archiveVersion,
        "Main-Class": project.mainClassName,
        "Class-Path": "classes/\n " + configurations.runtimeClasspath.collect { "lib/" + it.getName() }.join(" \n "))
    }
}
distributionDependencies.dependsOn(writeLaunchJar)

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea"].any { qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}


// start Windows distribution tasks   
distributions {
    windows {
        contents {
            with(baseDistribution)
            from("$buildDir/bundled-java/windows/")
            from(createExe.dest)
        }        
    }
}

tasks.register("windowsDistributionDependencies") {
    doLast {
      println("Windows distribution dependnecies")
    }
}
windowsDistributionDependencies.dependsOn(distributionDependencies)
windowsDistTar.dependsOn(windowsDistributionDependencies)
windowsDistZip.dependsOn(windowsDistributionDependencies)
  installWindowsDist.dependsOn(windowsDistributionDependencies)

tasks.register("downloadJavaWindows", Download) {
    src(project.java_windows_url)
    dest(project.java_download_base.resolve("windows-java.zip").toFile())
    overwrite(false)
}
tasks.register("verifyJavaWindows", Verify) {
    dependsOn(downloadJavaWindows)

    src(downloadJavaWindows.dest)
    algorithm("SHA-256")
    checksum(project.java_windows_checksum)
}
tasks.register("uncompressJavaWindows", Copy) {
    dependsOn(verifyJavaWindows)    
    from(zipTree(downloadJavaWindows.dest))
    into(project.java_download_base.resolve("windows"))
} 
uncompressJavaWindows.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree(project.java_download_base.resolve("windows")) {
        include "**/bin/server/classes.jsa"
          })
}
windowsDistributionDependencies.dependsOn(uncompressJavaWindows)


installWindowsDist.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree("$buildDir/install/windows") {
        include "**/bin/server/classes.jsa"
          })
}
// end Windows distribution tasks

// start Linux distribution tasks
distributions {
    linux {
        contents {
            with(baseDistribution)
            with(launchScriptDist)
            from("$buildDir/bundled-java/linux/")
            from(createExe.dest)
        }        
    }
}

tasks.register("linuxDistributionDependencies") {
    doFirst {
        println("Linux distribution dependnecies")
    }
}
linuxDistributionDependencies.dependsOn(distributionDependencies)
linuxDistTar.dependsOn(linuxDistributionDependencies)
linuxDistZip.dependsOn(linuxDistributionDependencies)
installLinuxDist.dependsOn(linuxDistributionDependencies)

tasks.register("downloadJavaLinux", Download) {
    src(project.java_linux_url)
    dest(project.java_download_base.resolve("linux-java.tar.gz").toFile())
    overwrite(false)
}
tasks.register("verifyJavaLinux", Verify) {
    dependsOn(downloadJavaLinux)
    src(downloadJavaLinux.dest)
    algorithm("SHA-256")
    checksum(project.java_linux_checksum)
}
tasks.register("uncompressJavaLinux", Copy) {
    dependsOn(verifyJavaLinux)    
    from(tarTree(downloadJavaLinux.dest))
    into(project.java_download_base.resolve("linux"))
} 
uncompressJavaLinux.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree(project.java_download_base.resolve("linux")) {
        include "**/lib/server/classes.jsa"
        include "**/legal/**"
          })
}
linuxDistributionDependencies.dependsOn(uncompressJavaLinux)


installLinuxDist.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree("$buildDir/install/linux") {
        include "**/lib/server/classes.jsa"
        include "**/legal/**"
          })
}
// end Linux distribution tasks


// start Mac distribution tasks
distributions {
    mac {
        contents {
            with(baseDistribution)
            with(launchScriptDist)
            from("$buildDir/bundled-java/mac/")
            from(createExe.dest)
        }        
    }
}

tasks.register("macDistributionDependencies") {
    doFirst {
      println("Mac distribution dependnecies")
    }
}
macDistributionDependencies.dependsOn(distributionDependencies)
macDistTar.dependsOn(macDistributionDependencies)
macDistZip.dependsOn(macDistributionDependencies)
installMacDist.dependsOn(macDistributionDependencies)

tasks.register("downloadJavaMac", Download) {
    src(project.java_mac_url)
    dest(project.java_download_base.resolve("mac-java.tar.gz").toFile())
    overwrite(false)
}
tasks.register("verifyJavaMac", Verify) {
    dependsOn(downloadJavaMac)
    src(downloadJavaMac.dest)
    algorithm("SHA-256")
    checksum(project.java_mac_checksum)
}
tasks.register("uncompressJavaMac", Copy) {
    dependsOn(verifyJavaMac)      
    from(tarTree(downloadJavaMac.dest))
    into(project.java_download_base.resolve("mac"))
} 
uncompressJavaMac.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree(project.java_download_base.resolve("mac")) {
        include "**/lib/server/classes.jsa"
        include "**/legal/**"
          })
}
macDistributionDependencies.dependsOn(uncompressJavaMac)


installMacDist.doFirst {
    // Need to remove read-only file from JDK release
  delete(fileTree("$buildDir/install/mac") {
        include "**/lib/server/classes.jsa"
        include "**/legal/**"
          })
}
// end Mac distribution tasks


checkstyle {
    configDirectory = file("$projectDir")
    configFile = file("checkstyle.xml")
    showViolations = true
    ignoreFailures = true
    toolVersion = "8.18"
}

checkerFramework {
    checkers = [
        "org.checkerframework.checker.nullness.NullnessChecker"
    ]
    extraJavacArgs = [
        "-AonlyDefs=^fll\\.(documents|flltools)",
        "-Awarns",  
        "-Xmaxwarns", "10000",
        "-AstubWarnIfNotFound"
    ]
}

def checker_dir = file("./checker/checker-framework")
if (checker_dir.exists()) {
    println("Using development version of checker in: " + checker_dir)
    
    dependencies {
        compileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-qual.jar")))
        testCompileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-qual.jar")))
        checkerFramework files(file(checker_dir.toPath().resolve("checker/dist/checker.jar")))
    }
}



jacocoTestReport {
    reports {
        xml.enabled true
    }
}