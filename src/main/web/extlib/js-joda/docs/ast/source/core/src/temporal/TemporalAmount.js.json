{
  "type": "File",
  "start": 0,
  "end": 8031,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 183,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 8031,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 183,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 229,
        "end": 276,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 47
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 238,
            "end": 256,
            "loc": {
              "start": {
                "line": 7,
                "column": 9
              },
              "end": {
                "line": 7,
                "column": 27
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 238,
              "end": 256,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 9
                },
                "end": {
                  "line": 7,
                  "column": 27
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail",
              "leadingComments": null
            },
            "local": {
              "type": "Identifier",
              "start": 238,
              "end": 256,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 9
                },
                "end": {
                  "line": 7,
                  "column": 27
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail"
            },
            "leadingComments": null
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 264,
          "end": 275,
          "loc": {
            "start": {
              "line": 7,
              "column": 35
            },
            "end": {
              "line": 7,
              "column": 46
            }
          },
          "extra": {
            "rawValue": "../assert",
            "raw": "'../assert'"
          },
          "value": "../assert"
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
            "start": 0,
            "end": 227,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
            "start": 278,
            "end": 1464,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1465,
        "end": 7418,
        "loc": {
          "start": {
            "line": 35,
            "column": 0
          },
          "end": {
            "line": 166,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 1472,
          "end": 7418,
          "loc": {
            "start": {
              "line": 35,
              "column": 7
            },
            "end": {
              "line": 166,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 1478,
            "end": 1492,
            "loc": {
              "start": {
                "line": 35,
                "column": 13
              },
              "end": {
                "line": 35,
                "column": 27
              },
              "identifierName": "TemporalAmount"
            },
            "name": "TemporalAmount",
            "leadingComments": null
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 1493,
            "end": 7418,
            "loc": {
              "start": {
                "line": 35,
                "column": 28
              },
              "end": {
                "line": 166,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassMethod",
                "start": 2340,
                "end": 2392,
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 4
                  },
                  "end": {
                    "line": 55,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2340,
                  "end": 2343,
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 4
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    },
                    "identifierName": "get"
                  },
                  "name": "get",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 2344,
                    "end": 2348,
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 8
                      },
                      "end": {
                        "line": 53,
                        "column": 12
                      },
                      "identifierName": "unit"
                    },
                    "name": "unit"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 2350,
                  "end": 2392,
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 14
                    },
                    "end": {
                      "line": 55,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 2360,
                      "end": 2386,
                      "loc": {
                        "start": {
                          "line": 54,
                          "column": 8
                        },
                        "end": {
                          "line": 54,
                          "column": 34
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 2360,
                        "end": 2385,
                        "loc": {
                          "start": {
                            "line": 54,
                            "column": 8
                          },
                          "end": {
                            "line": 54,
                            "column": 33
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 2360,
                          "end": 2378,
                          "loc": {
                            "start": {
                              "line": 54,
                              "column": 8
                            },
                            "end": {
                              "line": 54,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 2379,
                            "end": 2384,
                            "loc": {
                              "start": {
                                "line": 54,
                                "column": 27
                              },
                              "end": {
                                "line": 54,
                                "column": 32
                              }
                            },
                            "extra": {
                              "rawValue": "get",
                              "raw": "'get'"
                            },
                            "value": "get"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     ",
                    "start": 1499,
                    "end": 2288,
                    "loc": {
                      "start": {
                        "line": 36,
                        "column": 4
                      },
                      "end": {
                        "line": 51,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 2293,
                    "end": 2335,
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 4
                      },
                      "end": {
                        "line": 52,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
                    "start": 2402,
                    "end": 3091,
                    "loc": {
                      "start": {
                        "line": 57,
                        "column": 4
                      },
                      "end": {
                        "line": 71,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 3096,
                "end": 3148,
                "loc": {
                  "start": {
                    "line": 72,
                    "column": 4
                  },
                  "end": {
                    "line": 74,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 3096,
                  "end": 3101,
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 4
                    },
                    "end": {
                      "line": 72,
                      "column": 9
                    },
                    "identifierName": "units"
                  },
                  "name": "units",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 3104,
                  "end": 3148,
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 12
                    },
                    "end": {
                      "line": 74,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 3114,
                      "end": 3142,
                      "loc": {
                        "start": {
                          "line": 73,
                          "column": 8
                        },
                        "end": {
                          "line": 73,
                          "column": 36
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 3114,
                        "end": 3141,
                        "loc": {
                          "start": {
                            "line": 73,
                            "column": 8
                          },
                          "end": {
                            "line": 73,
                            "column": 35
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 3114,
                          "end": 3132,
                          "loc": {
                            "start": {
                              "line": 73,
                              "column": 8
                            },
                            "end": {
                              "line": 73,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 3133,
                            "end": 3140,
                            "loc": {
                              "start": {
                                "line": 73,
                                "column": 27
                              },
                              "end": {
                                "line": 73,
                                "column": 34
                              }
                            },
                            "extra": {
                              "rawValue": "units",
                              "raw": "'units'"
                            },
                            "value": "units"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
                    "start": 2402,
                    "end": 3091,
                    "loc": {
                      "start": {
                        "line": 57,
                        "column": 4
                      },
                      "end": {
                        "line": 71,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                    "start": 3158,
                    "end": 5128,
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 4
                      },
                      "end": {
                        "line": 115,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 5133,
                    "end": 5175,
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 4
                      },
                      "end": {
                        "line": 116,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 5180,
                "end": 5240,
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 4
                  },
                  "end": {
                    "line": 119,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 5180,
                  "end": 5185,
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 4
                    },
                    "end": {
                      "line": 117,
                      "column": 9
                    },
                    "identifierName": "addTo"
                  },
                  "name": "addTo",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 5186,
                    "end": 5194,
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 10
                      },
                      "end": {
                        "line": 117,
                        "column": 18
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 5196,
                  "end": 5240,
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 20
                    },
                    "end": {
                      "line": 119,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 5206,
                      "end": 5234,
                      "loc": {
                        "start": {
                          "line": 118,
                          "column": 8
                        },
                        "end": {
                          "line": 118,
                          "column": 36
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 5206,
                        "end": 5233,
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 8
                          },
                          "end": {
                            "line": 118,
                            "column": 35
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 5206,
                          "end": 5224,
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 8
                            },
                            "end": {
                              "line": 118,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 5225,
                            "end": 5232,
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 27
                              },
                              "end": {
                                "line": 118,
                                "column": 34
                              }
                            },
                            "extra": {
                              "rawValue": "addTo",
                              "raw": "'addTo'"
                            },
                            "value": "addTo"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                    "start": 3158,
                    "end": 5128,
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 4
                      },
                      "end": {
                        "line": 115,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 5133,
                    "end": 5175,
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 4
                      },
                      "end": {
                        "line": 116,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                    "start": 5250,
                    "end": 7285,
                    "loc": {
                      "start": {
                        "line": 121,
                        "column": 4
                      },
                      "end": {
                        "line": 160,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 7290,
                    "end": 7332,
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 4
                      },
                      "end": {
                        "line": 161,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 7337,
                "end": 7411,
                "loc": {
                  "start": {
                    "line": 162,
                    "column": 4
                  },
                  "end": {
                    "line": 164,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 7337,
                  "end": 7349,
                  "loc": {
                    "start": {
                      "line": 162,
                      "column": 4
                    },
                    "end": {
                      "line": 162,
                      "column": 16
                    },
                    "identifierName": "subtractFrom"
                  },
                  "name": "subtractFrom",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 7350,
                    "end": 7358,
                    "loc": {
                      "start": {
                        "line": 162,
                        "column": 17
                      },
                      "end": {
                        "line": 162,
                        "column": 25
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 7360,
                  "end": 7411,
                  "loc": {
                    "start": {
                      "line": 162,
                      "column": 27
                    },
                    "end": {
                      "line": 164,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 7370,
                      "end": 7405,
                      "loc": {
                        "start": {
                          "line": 163,
                          "column": 8
                        },
                        "end": {
                          "line": 163,
                          "column": 43
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 7370,
                        "end": 7404,
                        "loc": {
                          "start": {
                            "line": 163,
                            "column": 8
                          },
                          "end": {
                            "line": 163,
                            "column": 42
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 7370,
                          "end": 7388,
                          "loc": {
                            "start": {
                              "line": 163,
                              "column": 8
                            },
                            "end": {
                              "line": 163,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 7389,
                            "end": 7403,
                            "loc": {
                              "start": {
                                "line": 163,
                                "column": 27
                              },
                              "end": {
                                "line": 163,
                                "column": 41
                              }
                            },
                            "extra": {
                              "rawValue": "subtractFrom",
                              "raw": "'subtractFrom'"
                            },
                            "value": "subtractFrom"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                    "start": 5250,
                    "end": 7285,
                    "loc": {
                      "start": {
                        "line": 121,
                        "column": 4
                      },
                      "end": {
                        "line": 160,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 7290,
                    "end": 7332,
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 4
                      },
                      "end": {
                        "line": 161,
                        "column": 46
                      }
                    }
                  }
                ]
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
              "start": 278,
              "end": 1464,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 34,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
            "start": 278,
            "end": 1464,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "IfStatement",
        "start": 7420,
        "end": 8030,
        "loc": {
          "start": {
            "line": 168,
            "column": 0
          },
          "end": {
            "line": 182,
            "column": 1
          }
        },
        "test": {
          "type": "LogicalExpression",
          "start": 7424,
          "end": 7475,
          "loc": {
            "start": {
              "line": 168,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 55
            }
          },
          "left": {
            "type": "BinaryExpression",
            "start": 7424,
            "end": 7453,
            "loc": {
              "start": {
                "line": 168,
                "column": 4
              },
              "end": {
                "line": 168,
                "column": 33
              }
            },
            "left": {
              "type": "UnaryExpression",
              "start": 7424,
              "end": 7437,
              "loc": {
                "start": {
                  "line": 168,
                  "column": 4
                },
                "end": {
                  "line": 168,
                  "column": 17
                }
              },
              "operator": "typeof",
              "prefix": true,
              "argument": {
                "type": "Identifier",
                "start": 7431,
                "end": 7437,
                "loc": {
                  "start": {
                    "line": 168,
                    "column": 11
                  },
                  "end": {
                    "line": 168,
                    "column": 17
                  },
                  "identifierName": "Symbol"
                },
                "name": "Symbol"
              },
              "extra": {
                "parenthesizedArgument": false
              }
            },
            "operator": "!==",
            "right": {
              "type": "StringLiteral",
              "start": 7442,
              "end": 7453,
              "loc": {
                "start": {
                  "line": 168,
                  "column": 22
                },
                "end": {
                  "line": 168,
                  "column": 33
                }
              },
              "extra": {
                "rawValue": "undefined",
                "raw": "'undefined'"
              },
              "value": "undefined"
            }
          },
          "operator": "&&",
          "right": {
            "type": "MemberExpression",
            "start": 7457,
            "end": 7475,
            "loc": {
              "start": {
                "line": 168,
                "column": 37
              },
              "end": {
                "line": 168,
                "column": 55
              }
            },
            "object": {
              "type": "Identifier",
              "start": 7457,
              "end": 7463,
              "loc": {
                "start": {
                  "line": 168,
                  "column": 37
                },
                "end": {
                  "line": 168,
                  "column": 43
                },
                "identifierName": "Symbol"
              },
              "name": "Symbol"
            },
            "property": {
              "type": "Identifier",
              "start": 7464,
              "end": 7475,
              "loc": {
                "start": {
                  "line": 168,
                  "column": 44
                },
                "end": {
                  "line": 168,
                  "column": 55
                },
                "identifierName": "toPrimitive"
              },
              "name": "toPrimitive"
            },
            "computed": false
          }
        },
        "consequent": {
          "type": "BlockStatement",
          "start": 7477,
          "end": 8030,
          "loc": {
            "start": {
              "line": 168,
              "column": 57
            },
            "end": {
              "line": 182,
              "column": 1
            }
          },
          "body": [
            {
              "type": "ExpressionStatement",
              "start": 7483,
              "end": 8028,
              "loc": {
                "start": {
                  "line": 169,
                  "column": 4
                },
                "end": {
                  "line": 181,
                  "column": 6
                }
              },
              "expression": {
                "type": "AssignmentExpression",
                "start": 7483,
                "end": 8027,
                "loc": {
                  "start": {
                    "line": 169,
                    "column": 4
                  },
                  "end": {
                    "line": 181,
                    "column": 5
                  }
                },
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "start": 7483,
                  "end": 7527,
                  "loc": {
                    "start": {
                      "line": 169,
                      "column": 4
                    },
                    "end": {
                      "line": 169,
                      "column": 48
                    }
                  },
                  "object": {
                    "type": "MemberExpression",
                    "start": 7483,
                    "end": 7507,
                    "loc": {
                      "start": {
                        "line": 169,
                        "column": 4
                      },
                      "end": {
                        "line": 169,
                        "column": 28
                      }
                    },
                    "object": {
                      "type": "Identifier",
                      "start": 7483,
                      "end": 7497,
                      "loc": {
                        "start": {
                          "line": 169,
                          "column": 4
                        },
                        "end": {
                          "line": 169,
                          "column": 18
                        },
                        "identifierName": "TemporalAmount"
                      },
                      "name": "TemporalAmount"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 7498,
                      "end": 7507,
                      "loc": {
                        "start": {
                          "line": 169,
                          "column": 19
                        },
                        "end": {
                          "line": 169,
                          "column": 28
                        },
                        "identifierName": "prototype"
                      },
                      "name": "prototype"
                    },
                    "computed": false
                  },
                  "property": {
                    "type": "MemberExpression",
                    "start": 7508,
                    "end": 7526,
                    "loc": {
                      "start": {
                        "line": 169,
                        "column": 29
                      },
                      "end": {
                        "line": 169,
                        "column": 47
                      }
                    },
                    "object": {
                      "type": "Identifier",
                      "start": 7508,
                      "end": 7514,
                      "loc": {
                        "start": {
                          "line": 169,
                          "column": 29
                        },
                        "end": {
                          "line": 169,
                          "column": 35
                        },
                        "identifierName": "Symbol"
                      },
                      "name": "Symbol"
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 7515,
                      "end": 7526,
                      "loc": {
                        "start": {
                          "line": 169,
                          "column": 36
                        },
                        "end": {
                          "line": 169,
                          "column": 47
                        },
                        "identifierName": "toPrimitive"
                      },
                      "name": "toPrimitive"
                    },
                    "computed": false
                  },
                  "computed": true
                },
                "right": {
                  "type": "FunctionExpression",
                  "start": 7530,
                  "end": 8027,
                  "loc": {
                    "start": {
                      "line": 169,
                      "column": 51
                    },
                    "end": {
                      "line": 181,
                      "column": 5
                    }
                  },
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "start": 7540,
                      "end": 7544,
                      "loc": {
                        "start": {
                          "line": 169,
                          "column": 61
                        },
                        "end": {
                          "line": 169,
                          "column": 65
                        },
                        "identifierName": "hint"
                      },
                      "name": "hint"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "start": 7546,
                    "end": 8027,
                    "loc": {
                      "start": {
                        "line": 169,
                        "column": 67
                      },
                      "end": {
                        "line": 181,
                        "column": 5
                      }
                    },
                    "body": [
                      {
                        "type": "IfStatement",
                        "start": 7690,
                        "end": 7760,
                        "loc": {
                          "start": {
                            "line": 172,
                            "column": 8
                          },
                          "end": {
                            "line": 174,
                            "column": 9
                          }
                        },
                        "test": {
                          "type": "BinaryExpression",
                          "start": 7694,
                          "end": 7711,
                          "loc": {
                            "start": {
                              "line": 172,
                              "column": 12
                            },
                            "end": {
                              "line": 172,
                              "column": 29
                            }
                          },
                          "left": {
                            "type": "Identifier",
                            "start": 7694,
                            "end": 7698,
                            "loc": {
                              "start": {
                                "line": 172,
                                "column": 12
                              },
                              "end": {
                                "line": 172,
                                "column": 16
                              },
                              "identifierName": "hint"
                            },
                            "name": "hint",
                            "leadingComments": null
                          },
                          "operator": "!==",
                          "right": {
                            "type": "StringLiteral",
                            "start": 7703,
                            "end": 7711,
                            "loc": {
                              "start": {
                                "line": 172,
                                "column": 21
                              },
                              "end": {
                                "line": 172,
                                "column": 29
                              }
                            },
                            "extra": {
                              "rawValue": "number",
                              "raw": "'number'"
                            },
                            "value": "number"
                          },
                          "leadingComments": null
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "start": 7713,
                          "end": 7760,
                          "loc": {
                            "start": {
                              "line": 172,
                              "column": 31
                            },
                            "end": {
                              "line": 174,
                              "column": 9
                            }
                          },
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "start": 7727,
                              "end": 7750,
                              "loc": {
                                "start": {
                                  "line": 173,
                                  "column": 12
                                },
                                "end": {
                                  "line": 173,
                                  "column": 35
                                }
                              },
                              "argument": {
                                "type": "CallExpression",
                                "start": 7734,
                                "end": 7749,
                                "loc": {
                                  "start": {
                                    "line": 173,
                                    "column": 19
                                  },
                                  "end": {
                                    "line": 173,
                                    "column": 34
                                  }
                                },
                                "callee": {
                                  "type": "MemberExpression",
                                  "start": 7734,
                                  "end": 7747,
                                  "loc": {
                                    "start": {
                                      "line": 173,
                                      "column": 19
                                    },
                                    "end": {
                                      "line": 173,
                                      "column": 32
                                    }
                                  },
                                  "object": {
                                    "type": "ThisExpression",
                                    "start": 7734,
                                    "end": 7738,
                                    "loc": {
                                      "start": {
                                        "line": 173,
                                        "column": 19
                                      },
                                      "end": {
                                        "line": 173,
                                        "column": 23
                                      }
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "start": 7739,
                                    "end": 7747,
                                    "loc": {
                                      "start": {
                                        "line": 173,
                                        "column": 24
                                      },
                                      "end": {
                                        "line": 173,
                                        "column": 32
                                      },
                                      "identifierName": "toString"
                                    },
                                    "name": "toString"
                                  },
                                  "computed": false
                                },
                                "arguments": []
                              }
                            }
                          ],
                          "directives": []
                        },
                        "alternate": null,
                        "leadingComments": [
                          {
                            "type": "CommentLine",
                            "value": " hint could be 'number', 'string' or 'default'. Only 'number'",
                            "start": 7556,
                            "end": 7619,
                            "loc": {
                              "start": {
                                "line": 170,
                                "column": 8
                              },
                              "end": {
                                "line": 170,
                                "column": 71
                              }
                            }
                          },
                          {
                            "type": "CommentLine",
                            "value": " should throw and 'default' is treated as 'string'.",
                            "start": 7628,
                            "end": 7681,
                            "loc": {
                              "start": {
                                "line": 171,
                                "column": 8
                              },
                              "end": {
                                "line": 171,
                                "column": 61
                              }
                            }
                          }
                        ]
                      },
                      {
                        "type": "ThrowStatement",
                        "start": 7770,
                        "end": 8021,
                        "loc": {
                          "start": {
                            "line": 176,
                            "column": 8
                          },
                          "end": {
                            "line": 180,
                            "column": 10
                          }
                        },
                        "argument": {
                          "type": "NewExpression",
                          "start": 7776,
                          "end": 8020,
                          "loc": {
                            "start": {
                              "line": 176,
                              "column": 14
                            },
                            "end": {
                              "line": 180,
                              "column": 9
                            }
                          },
                          "callee": {
                            "type": "Identifier",
                            "start": 7780,
                            "end": 7789,
                            "loc": {
                              "start": {
                                "line": 176,
                                "column": 18
                              },
                              "end": {
                                "line": 176,
                                "column": 27
                              },
                              "identifierName": "TypeError"
                            },
                            "name": "TypeError"
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "start": 7803,
                              "end": 8010,
                              "loc": {
                                "start": {
                                  "line": 177,
                                  "column": 12
                                },
                                "end": {
                                  "line": 179,
                                  "column": 60
                                }
                              },
                              "left": {
                                "type": "BinaryExpression",
                                "start": 7803,
                                "end": 7947,
                                "loc": {
                                  "start": {
                                    "line": 177,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 178,
                                    "column": 78
                                  }
                                },
                                "left": {
                                  "type": "StringLiteral",
                                  "start": 7803,
                                  "end": 7866,
                                  "loc": {
                                    "start": {
                                      "line": 177,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 177,
                                      "column": 75
                                    }
                                  },
                                  "extra": {
                                    "rawValue": "A conversion from TemporalAmount to a number is not allowed. ",
                                    "raw": "'A conversion from TemporalAmount to a number is not allowed. '"
                                  },
                                  "value": "A conversion from TemporalAmount to a number is not allowed. "
                                },
                                "operator": "+",
                                "right": {
                                  "type": "StringLiteral",
                                  "start": 7881,
                                  "end": 7947,
                                  "loc": {
                                    "start": {
                                      "line": 178,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 178,
                                      "column": 78
                                    }
                                  },
                                  "extra": {
                                    "rawValue": "To compare use the methods .equals(), .compareTo(), .isBefore() ",
                                    "raw": "'To compare use the methods .equals(), .compareTo(), .isBefore() '"
                                  },
                                  "value": "To compare use the methods .equals(), .compareTo(), .isBefore() "
                                }
                              },
                              "operator": "+",
                              "right": {
                                "type": "StringLiteral",
                                "start": 7962,
                                "end": 8010,
                                "loc": {
                                  "start": {
                                    "line": 179,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 179,
                                    "column": 60
                                  }
                                },
                                "extra": {
                                  "rawValue": "or one that is more suitable to your use case.",
                                  "raw": "'or one that is more suitable to your use case.'"
                                },
                                "value": "or one that is more suitable to your use case."
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              }
            }
          ],
          "directives": []
        },
        "alternate": null
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 0,
      "end": 227,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
      "start": 278,
      "end": 1464,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     ",
      "start": 1499,
      "end": 2288,
      "loc": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 2293,
      "end": 2335,
      "loc": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
      "start": 2402,
      "end": 3091,
      "loc": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 3158,
      "end": 5128,
      "loc": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 5133,
      "end": 5175,
      "loc": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 5250,
      "end": 7285,
      "loc": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 7290,
      "end": 7332,
      "loc": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 46
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " hint could be 'number', 'string' or 'default'. Only 'number'",
      "start": 7556,
      "end": 7619,
      "loc": {
        "start": {
          "line": 170,
          "column": 8
        },
        "end": {
          "line": 170,
          "column": 71
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " should throw and 'default' is treated as 'string'.",
      "start": 7628,
      "end": 7681,
      "loc": {
        "start": {
          "line": 171,
          "column": 8
        },
        "end": {
          "line": 171,
          "column": 61
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 0,
      "end": 227,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 229,
      "end": 235,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 236,
      "end": 237,
      "loc": {
        "start": {
          "line": 7,
          "column": 7
        },
        "end": {
          "line": 7,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 238,
      "end": 256,
      "loc": {
        "start": {
          "line": 7,
          "column": 9
        },
        "end": {
          "line": 7,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 257,
      "end": 258,
      "loc": {
        "start": {
          "line": 7,
          "column": 28
        },
        "end": {
          "line": 7,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 259,
      "end": 263,
      "loc": {
        "start": {
          "line": 7,
          "column": 30
        },
        "end": {
          "line": 7,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../assert",
      "start": 264,
      "end": 275,
      "loc": {
        "start": {
          "line": 7,
          "column": 35
        },
        "end": {
          "line": 7,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 275,
      "end": 276,
      "loc": {
        "start": {
          "line": 7,
          "column": 46
        },
        "end": {
          "line": 7,
          "column": 47
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n ",
      "start": 278,
      "end": 1464,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1465,
      "end": 1471,
      "loc": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 1472,
      "end": 1477,
      "loc": {
        "start": {
          "line": 35,
          "column": 7
        },
        "end": {
          "line": 35,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalAmount",
      "start": 1478,
      "end": 1492,
      "loc": {
        "start": {
          "line": 35,
          "column": 13
        },
        "end": {
          "line": 35,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1493,
      "end": 1494,
      "loc": {
        "start": {
          "line": 35,
          "column": 28
        },
        "end": {
          "line": 35,
          "column": 29
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     ",
      "start": 1499,
      "end": 2288,
      "loc": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 2293,
      "end": 2335,
      "loc": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "get",
      "start": 2340,
      "end": 2343,
      "loc": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2343,
      "end": 2344,
      "loc": {
        "start": {
          "line": 53,
          "column": 7
        },
        "end": {
          "line": 53,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "unit",
      "start": 2344,
      "end": 2348,
      "loc": {
        "start": {
          "line": 53,
          "column": 8
        },
        "end": {
          "line": 53,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2348,
      "end": 2349,
      "loc": {
        "start": {
          "line": 53,
          "column": 12
        },
        "end": {
          "line": 53,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2350,
      "end": 2351,
      "loc": {
        "start": {
          "line": 53,
          "column": 14
        },
        "end": {
          "line": 53,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 2360,
      "end": 2378,
      "loc": {
        "start": {
          "line": 54,
          "column": 8
        },
        "end": {
          "line": 54,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2378,
      "end": 2379,
      "loc": {
        "start": {
          "line": 54,
          "column": 26
        },
        "end": {
          "line": 54,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "get",
      "start": 2379,
      "end": 2384,
      "loc": {
        "start": {
          "line": 54,
          "column": 27
        },
        "end": {
          "line": 54,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2384,
      "end": 2385,
      "loc": {
        "start": {
          "line": 54,
          "column": 32
        },
        "end": {
          "line": 54,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2385,
      "end": 2386,
      "loc": {
        "start": {
          "line": 54,
          "column": 33
        },
        "end": {
          "line": 54,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2391,
      "end": 2392,
      "loc": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 55,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     ",
      "start": 2402,
      "end": 3091,
      "loc": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "units",
      "start": 3096,
      "end": 3101,
      "loc": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3101,
      "end": 3102,
      "loc": {
        "start": {
          "line": 72,
          "column": 9
        },
        "end": {
          "line": 72,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3102,
      "end": 3103,
      "loc": {
        "start": {
          "line": 72,
          "column": 10
        },
        "end": {
          "line": 72,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3104,
      "end": 3105,
      "loc": {
        "start": {
          "line": 72,
          "column": 12
        },
        "end": {
          "line": 72,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 3114,
      "end": 3132,
      "loc": {
        "start": {
          "line": 73,
          "column": 8
        },
        "end": {
          "line": 73,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3132,
      "end": 3133,
      "loc": {
        "start": {
          "line": 73,
          "column": 26
        },
        "end": {
          "line": 73,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "units",
      "start": 3133,
      "end": 3140,
      "loc": {
        "start": {
          "line": 73,
          "column": 27
        },
        "end": {
          "line": 73,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3140,
      "end": 3141,
      "loc": {
        "start": {
          "line": 73,
          "column": 34
        },
        "end": {
          "line": 73,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3141,
      "end": 3142,
      "loc": {
        "start": {
          "line": 73,
          "column": 35
        },
        "end": {
          "line": 73,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3147,
      "end": 3148,
      "loc": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 3158,
      "end": 5128,
      "loc": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 5133,
      "end": 5175,
      "loc": {
        "start": {
          "line": 116,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "addTo",
      "start": 5180,
      "end": 5185,
      "loc": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5185,
      "end": 5186,
      "loc": {
        "start": {
          "line": 117,
          "column": 9
        },
        "end": {
          "line": 117,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 5186,
      "end": 5194,
      "loc": {
        "start": {
          "line": 117,
          "column": 10
        },
        "end": {
          "line": 117,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5194,
      "end": 5195,
      "loc": {
        "start": {
          "line": 117,
          "column": 18
        },
        "end": {
          "line": 117,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5196,
      "end": 5197,
      "loc": {
        "start": {
          "line": 117,
          "column": 20
        },
        "end": {
          "line": 117,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 5206,
      "end": 5224,
      "loc": {
        "start": {
          "line": 118,
          "column": 8
        },
        "end": {
          "line": 118,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5224,
      "end": 5225,
      "loc": {
        "start": {
          "line": 118,
          "column": 26
        },
        "end": {
          "line": 118,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "addTo",
      "start": 5225,
      "end": 5232,
      "loc": {
        "start": {
          "line": 118,
          "column": 27
        },
        "end": {
          "line": 118,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5232,
      "end": 5233,
      "loc": {
        "start": {
          "line": 118,
          "column": 34
        },
        "end": {
          "line": 118,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5233,
      "end": 5234,
      "loc": {
        "start": {
          "line": 118,
          "column": 35
        },
        "end": {
          "line": 118,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5239,
      "end": 5240,
      "loc": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 5250,
      "end": 7285,
      "loc": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 160,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 7290,
      "end": 7332,
      "loc": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "subtractFrom",
      "start": 7337,
      "end": 7349,
      "loc": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7349,
      "end": 7350,
      "loc": {
        "start": {
          "line": 162,
          "column": 16
        },
        "end": {
          "line": 162,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 7350,
      "end": 7358,
      "loc": {
        "start": {
          "line": 162,
          "column": 17
        },
        "end": {
          "line": 162,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7358,
      "end": 7359,
      "loc": {
        "start": {
          "line": 162,
          "column": 25
        },
        "end": {
          "line": 162,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7360,
      "end": 7361,
      "loc": {
        "start": {
          "line": 162,
          "column": 27
        },
        "end": {
          "line": 162,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 7370,
      "end": 7388,
      "loc": {
        "start": {
          "line": 163,
          "column": 8
        },
        "end": {
          "line": 163,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7388,
      "end": 7389,
      "loc": {
        "start": {
          "line": 163,
          "column": 26
        },
        "end": {
          "line": 163,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "subtractFrom",
      "start": 7389,
      "end": 7403,
      "loc": {
        "start": {
          "line": 163,
          "column": 27
        },
        "end": {
          "line": 163,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7403,
      "end": 7404,
      "loc": {
        "start": {
          "line": 163,
          "column": 41
        },
        "end": {
          "line": 163,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7404,
      "end": 7405,
      "loc": {
        "start": {
          "line": 163,
          "column": 42
        },
        "end": {
          "line": 163,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7410,
      "end": 7411,
      "loc": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7417,
      "end": 7418,
      "loc": {
        "start": {
          "line": 166,
          "column": 0
        },
        "end": {
          "line": 166,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "if",
        "keyword": "if",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "if",
      "start": 7420,
      "end": 7422,
      "loc": {
        "start": {
          "line": 168,
          "column": 0
        },
        "end": {
          "line": 168,
          "column": 2
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7423,
      "end": 7424,
      "loc": {
        "start": {
          "line": 168,
          "column": 3
        },
        "end": {
          "line": 168,
          "column": 4
        }
      }
    },
    {
      "type": {
        "label": "typeof",
        "keyword": "typeof",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": true,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "typeof",
      "start": 7424,
      "end": 7430,
      "loc": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Symbol",
      "start": 7431,
      "end": 7437,
      "loc": {
        "start": {
          "line": 168,
          "column": 11
        },
        "end": {
          "line": 168,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "==/!=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": 6,
        "updateContext": null
      },
      "value": "!==",
      "start": 7438,
      "end": 7441,
      "loc": {
        "start": {
          "line": 168,
          "column": 18
        },
        "end": {
          "line": 168,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "undefined",
      "start": 7442,
      "end": 7453,
      "loc": {
        "start": {
          "line": 168,
          "column": 22
        },
        "end": {
          "line": 168,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "&&",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": 2,
        "updateContext": null
      },
      "value": "&&",
      "start": 7454,
      "end": 7456,
      "loc": {
        "start": {
          "line": 168,
          "column": 34
        },
        "end": {
          "line": 168,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Symbol",
      "start": 7457,
      "end": 7463,
      "loc": {
        "start": {
          "line": 168,
          "column": 37
        },
        "end": {
          "line": 168,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7463,
      "end": 7464,
      "loc": {
        "start": {
          "line": 168,
          "column": 43
        },
        "end": {
          "line": 168,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "toPrimitive",
      "start": 7464,
      "end": 7475,
      "loc": {
        "start": {
          "line": 168,
          "column": 44
        },
        "end": {
          "line": 168,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7475,
      "end": 7476,
      "loc": {
        "start": {
          "line": 168,
          "column": 55
        },
        "end": {
          "line": 168,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7477,
      "end": 7478,
      "loc": {
        "start": {
          "line": 168,
          "column": 57
        },
        "end": {
          "line": 168,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalAmount",
      "start": 7483,
      "end": 7497,
      "loc": {
        "start": {
          "line": 169,
          "column": 4
        },
        "end": {
          "line": 169,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7497,
      "end": 7498,
      "loc": {
        "start": {
          "line": 169,
          "column": 18
        },
        "end": {
          "line": 169,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "prototype",
      "start": 7498,
      "end": 7507,
      "loc": {
        "start": {
          "line": 169,
          "column": 19
        },
        "end": {
          "line": 169,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "[",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7507,
      "end": 7508,
      "loc": {
        "start": {
          "line": 169,
          "column": 28
        },
        "end": {
          "line": 169,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Symbol",
      "start": 7508,
      "end": 7514,
      "loc": {
        "start": {
          "line": 169,
          "column": 29
        },
        "end": {
          "line": 169,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7514,
      "end": 7515,
      "loc": {
        "start": {
          "line": 169,
          "column": 35
        },
        "end": {
          "line": 169,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "toPrimitive",
      "start": 7515,
      "end": 7526,
      "loc": {
        "start": {
          "line": 169,
          "column": 36
        },
        "end": {
          "line": 169,
          "column": 47
        }
      }
    },
    {
      "type": {
        "label": "]",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7526,
      "end": 7527,
      "loc": {
        "start": {
          "line": 169,
          "column": 47
        },
        "end": {
          "line": 169,
          "column": 48
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 7528,
      "end": 7529,
      "loc": {
        "start": {
          "line": 169,
          "column": 49
        },
        "end": {
          "line": 169,
          "column": 50
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 7530,
      "end": 7538,
      "loc": {
        "start": {
          "line": 169,
          "column": 51
        },
        "end": {
          "line": 169,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7539,
      "end": 7540,
      "loc": {
        "start": {
          "line": 169,
          "column": 60
        },
        "end": {
          "line": 169,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "hint",
      "start": 7540,
      "end": 7544,
      "loc": {
        "start": {
          "line": 169,
          "column": 61
        },
        "end": {
          "line": 169,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7544,
      "end": 7545,
      "loc": {
        "start": {
          "line": 169,
          "column": 65
        },
        "end": {
          "line": 169,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7546,
      "end": 7547,
      "loc": {
        "start": {
          "line": 169,
          "column": 67
        },
        "end": {
          "line": 169,
          "column": 68
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " hint could be 'number', 'string' or 'default'. Only 'number'",
      "start": 7556,
      "end": 7619,
      "loc": {
        "start": {
          "line": 170,
          "column": 8
        },
        "end": {
          "line": 170,
          "column": 71
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " should throw and 'default' is treated as 'string'.",
      "start": 7628,
      "end": 7681,
      "loc": {
        "start": {
          "line": 171,
          "column": 8
        },
        "end": {
          "line": 171,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "if",
        "keyword": "if",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "if",
      "start": 7690,
      "end": 7692,
      "loc": {
        "start": {
          "line": 172,
          "column": 8
        },
        "end": {
          "line": 172,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7693,
      "end": 7694,
      "loc": {
        "start": {
          "line": 172,
          "column": 11
        },
        "end": {
          "line": 172,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "hint",
      "start": 7694,
      "end": 7698,
      "loc": {
        "start": {
          "line": 172,
          "column": 12
        },
        "end": {
          "line": 172,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "==/!=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": 6,
        "updateContext": null
      },
      "value": "!==",
      "start": 7699,
      "end": 7702,
      "loc": {
        "start": {
          "line": 172,
          "column": 17
        },
        "end": {
          "line": 172,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "number",
      "start": 7703,
      "end": 7711,
      "loc": {
        "start": {
          "line": 172,
          "column": 21
        },
        "end": {
          "line": 172,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7711,
      "end": 7712,
      "loc": {
        "start": {
          "line": 172,
          "column": 29
        },
        "end": {
          "line": 172,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7713,
      "end": 7714,
      "loc": {
        "start": {
          "line": 172,
          "column": 31
        },
        "end": {
          "line": 172,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 7727,
      "end": 7733,
      "loc": {
        "start": {
          "line": 173,
          "column": 12
        },
        "end": {
          "line": 173,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "this",
        "keyword": "this",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "this",
      "start": 7734,
      "end": 7738,
      "loc": {
        "start": {
          "line": 173,
          "column": 19
        },
        "end": {
          "line": 173,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7738,
      "end": 7739,
      "loc": {
        "start": {
          "line": 173,
          "column": 23
        },
        "end": {
          "line": 173,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "toString",
      "start": 7739,
      "end": 7747,
      "loc": {
        "start": {
          "line": 173,
          "column": 24
        },
        "end": {
          "line": 173,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7747,
      "end": 7748,
      "loc": {
        "start": {
          "line": 173,
          "column": 32
        },
        "end": {
          "line": 173,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7748,
      "end": 7749,
      "loc": {
        "start": {
          "line": 173,
          "column": 33
        },
        "end": {
          "line": 173,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7749,
      "end": 7750,
      "loc": {
        "start": {
          "line": 173,
          "column": 34
        },
        "end": {
          "line": 173,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7759,
      "end": 7760,
      "loc": {
        "start": {
          "line": 174,
          "column": 8
        },
        "end": {
          "line": 174,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "throw",
        "keyword": "throw",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "throw",
      "start": 7770,
      "end": 7775,
      "loc": {
        "start": {
          "line": 176,
          "column": 8
        },
        "end": {
          "line": 176,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "new",
        "keyword": "new",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "new",
      "start": 7776,
      "end": 7779,
      "loc": {
        "start": {
          "line": 176,
          "column": 14
        },
        "end": {
          "line": 176,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TypeError",
      "start": 7780,
      "end": 7789,
      "loc": {
        "start": {
          "line": 176,
          "column": 18
        },
        "end": {
          "line": 176,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7789,
      "end": 7790,
      "loc": {
        "start": {
          "line": 176,
          "column": 27
        },
        "end": {
          "line": 176,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "A conversion from TemporalAmount to a number is not allowed. ",
      "start": 7803,
      "end": 7866,
      "loc": {
        "start": {
          "line": 177,
          "column": 12
        },
        "end": {
          "line": 177,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "+/-",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": true,
        "postfix": false,
        "binop": 9,
        "updateContext": null
      },
      "value": "+",
      "start": 7867,
      "end": 7868,
      "loc": {
        "start": {
          "line": 177,
          "column": 76
        },
        "end": {
          "line": 177,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "To compare use the methods .equals(), .compareTo(), .isBefore() ",
      "start": 7881,
      "end": 7947,
      "loc": {
        "start": {
          "line": 178,
          "column": 12
        },
        "end": {
          "line": 178,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "+/-",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": true,
        "postfix": false,
        "binop": 9,
        "updateContext": null
      },
      "value": "+",
      "start": 7948,
      "end": 7949,
      "loc": {
        "start": {
          "line": 178,
          "column": 79
        },
        "end": {
          "line": 178,
          "column": 80
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "or one that is more suitable to your use case.",
      "start": 7962,
      "end": 8010,
      "loc": {
        "start": {
          "line": 179,
          "column": 12
        },
        "end": {
          "line": 179,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8019,
      "end": 8020,
      "loc": {
        "start": {
          "line": 180,
          "column": 8
        },
        "end": {
          "line": 180,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8020,
      "end": 8021,
      "loc": {
        "start": {
          "line": 180,
          "column": 9
        },
        "end": {
          "line": 180,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8026,
      "end": 8027,
      "loc": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8027,
      "end": 8028,
      "loc": {
        "start": {
          "line": 181,
          "column": 5
        },
        "end": {
          "line": 181,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8029,
      "end": 8030,
      "loc": {
        "start": {
          "line": 182,
          "column": 0
        },
        "end": {
          "line": 182,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8031,
      "end": 8031,
      "loc": {
        "start": {
          "line": 183,
          "column": 0
        },
        "end": {
          "line": 183,
          "column": 0
        }
      }
    }
  ]
}