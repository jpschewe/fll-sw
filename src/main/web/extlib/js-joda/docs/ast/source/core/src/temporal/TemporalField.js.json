{
  "type": "File",
  "start": 0,
  "end": 9898,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 249,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 9898,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 249,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 0,
        "end": 47,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 9,
            "end": 27,
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 27
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 9,
              "end": 27,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 9
                },
                "end": {
                  "line": 1,
                  "column": 27
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail"
            },
            "local": {
              "type": "Identifier",
              "start": 9,
              "end": 27,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 9
                },
                "end": {
                  "line": 1,
                  "column": 27
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 35,
          "end": 46,
          "loc": {
            "start": {
              "line": 1,
              "column": 35
            },
            "end": {
              "line": 1,
              "column": 46
            }
          },
          "extra": {
            "rawValue": "../assert",
            "raw": "'../assert'"
          },
          "value": "../assert"
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
            "start": 49,
            "end": 277,
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 7,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
            "start": 279,
            "end": 1099,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 25,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1100,
        "end": 9897,
        "loc": {
          "start": {
            "line": 26,
            "column": 0
          },
          "end": {
            "line": 248,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 1107,
          "end": 9897,
          "loc": {
            "start": {
              "line": 26,
              "column": 7
            },
            "end": {
              "line": 248,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 1113,
            "end": 1126,
            "loc": {
              "start": {
                "line": 26,
                "column": 13
              },
              "end": {
                "line": 26,
                "column": 26
              },
              "identifierName": "TemporalField"
            },
            "name": "TemporalField",
            "leadingComments": null
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 1127,
            "end": 9897,
            "loc": {
              "start": {
                "line": 26,
                "column": 27
              },
              "end": {
                "line": 248,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassMethod",
                "start": 1301,
                "end": 1365,
                "loc": {
                  "start": {
                    "line": 32,
                    "column": 4
                  },
                  "end": {
                    "line": 34,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 1301,
                  "end": 1312,
                  "loc": {
                    "start": {
                      "line": 32,
                      "column": 4
                    },
                    "end": {
                      "line": 32,
                      "column": 15
                    },
                    "identifierName": "isDateBased"
                  },
                  "name": "isDateBased",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 1315,
                  "end": 1365,
                  "loc": {
                    "start": {
                      "line": 32,
                      "column": 18
                    },
                    "end": {
                      "line": 34,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 1325,
                      "end": 1359,
                      "loc": {
                        "start": {
                          "line": 33,
                          "column": 8
                        },
                        "end": {
                          "line": 33,
                          "column": 42
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 1325,
                        "end": 1358,
                        "loc": {
                          "start": {
                            "line": 33,
                            "column": 8
                          },
                          "end": {
                            "line": 33,
                            "column": 41
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 1325,
                          "end": 1343,
                          "loc": {
                            "start": {
                              "line": 33,
                              "column": 8
                            },
                            "end": {
                              "line": 33,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 1344,
                            "end": 1357,
                            "loc": {
                              "start": {
                                "line": 33,
                                "column": 27
                              },
                              "end": {
                                "line": 33,
                                "column": 40
                              }
                            },
                            "extra": {
                              "rawValue": "isDateBased",
                              "raw": "'isDateBased'"
                            },
                            "value": "isDateBased"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Checks if this field represents a component of a date.\n     *\n     * @return {boolean} `true` if it is a component of a date, `false` otherwise.\n     ",
                    "start": 1133,
                    "end": 1296,
                    "loc": {
                      "start": {
                        "line": 27,
                        "column": 4
                      },
                      "end": {
                        "line": 31,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Checks if this field represents a component of a time.\n     *\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     ",
                    "start": 1371,
                    "end": 1534,
                    "loc": {
                      "start": {
                        "line": 36,
                        "column": 4
                      },
                      "end": {
                        "line": 40,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 1539,
                "end": 1603,
                "loc": {
                  "start": {
                    "line": 41,
                    "column": 4
                  },
                  "end": {
                    "line": 43,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 1539,
                  "end": 1550,
                  "loc": {
                    "start": {
                      "line": 41,
                      "column": 4
                    },
                    "end": {
                      "line": 41,
                      "column": 15
                    },
                    "identifierName": "isTimeBased"
                  },
                  "name": "isTimeBased",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 1553,
                  "end": 1603,
                  "loc": {
                    "start": {
                      "line": 41,
                      "column": 18
                    },
                    "end": {
                      "line": 43,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 1563,
                      "end": 1597,
                      "loc": {
                        "start": {
                          "line": 42,
                          "column": 8
                        },
                        "end": {
                          "line": 42,
                          "column": 42
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 1563,
                        "end": 1596,
                        "loc": {
                          "start": {
                            "line": 42,
                            "column": 8
                          },
                          "end": {
                            "line": 42,
                            "column": 41
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 1563,
                          "end": 1581,
                          "loc": {
                            "start": {
                              "line": 42,
                              "column": 8
                            },
                            "end": {
                              "line": 42,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 1582,
                            "end": 1595,
                            "loc": {
                              "start": {
                                "line": 42,
                                "column": 27
                              },
                              "end": {
                                "line": 42,
                                "column": 40
                              }
                            },
                            "extra": {
                              "rawValue": "isTimeBased",
                              "raw": "'isTimeBased'"
                            },
                            "value": "isTimeBased"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Checks if this field represents a component of a time.\n     *\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     ",
                    "start": 1371,
                    "end": 1534,
                    "loc": {
                      "start": {
                        "line": 36,
                        "column": 4
                      },
                      "end": {
                        "line": 40,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the unit that the field is measured in.\n     *\n     * The unit of the field is the period that varies within the range.\n     * For example, in the field 'MonthOfYear', the unit is 'Months'.\n     * See also {@link rangeUnit}.\n     *\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     ",
                    "start": 1609,
                    "end": 1947,
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 4
                      },
                      "end": {
                        "line": 53,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 1952,
                "end": 2010,
                "loc": {
                  "start": {
                    "line": 54,
                    "column": 4
                  },
                  "end": {
                    "line": 56,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 1952,
                  "end": 1960,
                  "loc": {
                    "start": {
                      "line": 54,
                      "column": 4
                    },
                    "end": {
                      "line": 54,
                      "column": 12
                    },
                    "identifierName": "baseUnit"
                  },
                  "name": "baseUnit",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 1963,
                  "end": 2010,
                  "loc": {
                    "start": {
                      "line": 54,
                      "column": 15
                    },
                    "end": {
                      "line": 56,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 1973,
                      "end": 2004,
                      "loc": {
                        "start": {
                          "line": 55,
                          "column": 8
                        },
                        "end": {
                          "line": 55,
                          "column": 39
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 1973,
                        "end": 2003,
                        "loc": {
                          "start": {
                            "line": 55,
                            "column": 8
                          },
                          "end": {
                            "line": 55,
                            "column": 38
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 1973,
                          "end": 1991,
                          "loc": {
                            "start": {
                              "line": 55,
                              "column": 8
                            },
                            "end": {
                              "line": 55,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 1992,
                            "end": 2002,
                            "loc": {
                              "start": {
                                "line": 55,
                                "column": 27
                              },
                              "end": {
                                "line": 55,
                                "column": 37
                              }
                            },
                            "extra": {
                              "rawValue": "baseUnit",
                              "raw": "'baseUnit'"
                            },
                            "value": "baseUnit"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the unit that the field is measured in.\n     *\n     * The unit of the field is the period that varies within the range.\n     * For example, in the field 'MonthOfYear', the unit is 'Months'.\n     * See also {@link rangeUnit}.\n     *\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     ",
                    "start": 1609,
                    "end": 1947,
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 4
                      },
                      "end": {
                        "line": 53,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the range that the field is bound by.\n     * \n     * The range of the field is the period that the field varies within.\n     * For example, in the field 'MonthOfYear', the range is 'Years'.\n     * See also {@link baseUnit}.\n     * \n     * The range is never null. For example, the 'Year' field is shorthand for\n     * 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.\n     *\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     ",
                    "start": 2016,
                    "end": 2521,
                    "loc": {
                      "start": {
                        "line": 58,
                        "column": 4
                      },
                      "end": {
                        "line": 69,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 2526,
                "end": 2586,
                "loc": {
                  "start": {
                    "line": 70,
                    "column": 4
                  },
                  "end": {
                    "line": 72,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2526,
                  "end": 2535,
                  "loc": {
                    "start": {
                      "line": 70,
                      "column": 4
                    },
                    "end": {
                      "line": 70,
                      "column": 13
                    },
                    "identifierName": "rangeUnit"
                  },
                  "name": "rangeUnit",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 2538,
                  "end": 2586,
                  "loc": {
                    "start": {
                      "line": 70,
                      "column": 16
                    },
                    "end": {
                      "line": 72,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 2548,
                      "end": 2580,
                      "loc": {
                        "start": {
                          "line": 71,
                          "column": 8
                        },
                        "end": {
                          "line": 71,
                          "column": 40
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 2548,
                        "end": 2579,
                        "loc": {
                          "start": {
                            "line": 71,
                            "column": 8
                          },
                          "end": {
                            "line": 71,
                            "column": 39
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 2548,
                          "end": 2566,
                          "loc": {
                            "start": {
                              "line": 71,
                              "column": 8
                            },
                            "end": {
                              "line": 71,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 2567,
                            "end": 2578,
                            "loc": {
                              "start": {
                                "line": 71,
                                "column": 27
                              },
                              "end": {
                                "line": 71,
                                "column": 38
                              }
                            },
                            "extra": {
                              "rawValue": "rangeUnit",
                              "raw": "'rangeUnit'"
                            },
                            "value": "rangeUnit"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the range that the field is bound by.\n     * \n     * The range of the field is the period that the field varies within.\n     * For example, in the field 'MonthOfYear', the range is 'Years'.\n     * See also {@link baseUnit}.\n     * \n     * The range is never null. For example, the 'Year' field is shorthand for\n     * 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.\n     *\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     ",
                    "start": 2016,
                    "end": 2521,
                    "loc": {
                      "start": {
                        "line": 58,
                        "column": 4
                      },
                      "end": {
                        "line": 69,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the range of valid values for the field.\n     *\n     * All fields can be expressed as an integer.\n     * This method returns an object that describes the valid range for that value.\n     * This method is generally only applicable to the ISO-8601 calendar system.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @return {ValueRange} the range of valid values for the field.\n     ",
                    "start": 2592,
                    "end": 3191,
                    "loc": {
                      "start": {
                        "line": 74,
                        "column": 4
                      },
                      "end": {
                        "line": 86,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 3196,
                "end": 3248,
                "loc": {
                  "start": {
                    "line": 87,
                    "column": 4
                  },
                  "end": {
                    "line": 89,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 3196,
                  "end": 3201,
                  "loc": {
                    "start": {
                      "line": 87,
                      "column": 4
                    },
                    "end": {
                      "line": 87,
                      "column": 9
                    },
                    "identifierName": "range"
                  },
                  "name": "range",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 3204,
                  "end": 3248,
                  "loc": {
                    "start": {
                      "line": 87,
                      "column": 12
                    },
                    "end": {
                      "line": 89,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 3214,
                      "end": 3242,
                      "loc": {
                        "start": {
                          "line": 88,
                          "column": 8
                        },
                        "end": {
                          "line": 88,
                          "column": 36
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 3214,
                        "end": 3241,
                        "loc": {
                          "start": {
                            "line": 88,
                            "column": 8
                          },
                          "end": {
                            "line": 88,
                            "column": 35
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 3214,
                          "end": 3232,
                          "loc": {
                            "start": {
                              "line": 88,
                              "column": 8
                            },
                            "end": {
                              "line": 88,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 3233,
                            "end": 3240,
                            "loc": {
                              "start": {
                                "line": 88,
                                "column": 27
                              },
                              "end": {
                                "line": 88,
                                "column": 34
                              }
                            },
                            "extra": {
                              "rawValue": "range",
                              "raw": "'range'"
                            },
                            "value": "range"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the range of valid values for the field.\n     *\n     * All fields can be expressed as an integer.\n     * This method returns an object that describes the valid range for that value.\n     * This method is generally only applicable to the ISO-8601 calendar system.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @return {ValueRange} the range of valid values for the field.\n     ",
                    "start": 2592,
                    "end": 3191,
                    "loc": {
                      "start": {
                        "line": 74,
                        "column": 4
                      },
                      "end": {
                        "line": 86,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     *\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link range}, however this method refines the result\n     * using the temporal. For example, if the field is {@link DAY_OF_MONTH} the\n     * {@link range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@link range},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     * \n     ",
                    "start": 3254,
                    "end": 4830,
                    "loc": {
                      "start": {
                        "line": 91,
                        "column": 4
                      },
                      "end": {
                        "line": 121,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 4835,
                    "end": 4877,
                    "loc": {
                      "start": {
                        "line": 122,
                        "column": 4
                      },
                      "end": {
                        "line": 122,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 4882,
                "end": 4960,
                "loc": {
                  "start": {
                    "line": 123,
                    "column": 4
                  },
                  "end": {
                    "line": 125,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 4882,
                  "end": 4896,
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 18
                    },
                    "identifierName": "rangeRefinedBy"
                  },
                  "name": "rangeRefinedBy",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 4897,
                    "end": 4905,
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 19
                      },
                      "end": {
                        "line": 123,
                        "column": 27
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 4907,
                  "end": 4960,
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 29
                    },
                    "end": {
                      "line": 125,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 4917,
                      "end": 4954,
                      "loc": {
                        "start": {
                          "line": 124,
                          "column": 8
                        },
                        "end": {
                          "line": 124,
                          "column": 45
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 4917,
                        "end": 4953,
                        "loc": {
                          "start": {
                            "line": 124,
                            "column": 8
                          },
                          "end": {
                            "line": 124,
                            "column": 44
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 4917,
                          "end": 4935,
                          "loc": {
                            "start": {
                              "line": 124,
                              "column": 8
                            },
                            "end": {
                              "line": 124,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 4936,
                            "end": 4952,
                            "loc": {
                              "start": {
                                "line": 124,
                                "column": 27
                              },
                              "end": {
                                "line": 124,
                                "column": 43
                              }
                            },
                            "extra": {
                              "rawValue": "rangeRefinedBy",
                              "raw": "'rangeRefinedBy'"
                            },
                            "value": "rangeRefinedBy"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     *\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link range}, however this method refines the result\n     * using the temporal. For example, if the field is {@link DAY_OF_MONTH} the\n     * {@link range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@link range},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     * \n     ",
                    "start": 3254,
                    "end": 4830,
                    "loc": {
                      "start": {
                        "line": 91,
                        "column": 4
                      },
                      "end": {
                        "line": 121,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 4835,
                    "end": 4877,
                    "loc": {
                      "start": {
                        "line": 122,
                        "column": 4
                      },
                      "end": {
                        "line": 122,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the value of this field from the specified temporal object.\n     *\n     * This queries the temporal object for the value of this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#get}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.getFrom(temporal);\n     *   temporal = temporal.get(thisField);\n     * </pre>\n     * It is recommended to use the second approach, as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     ",
                    "start": 4966,
                    "end": 6018,
                    "loc": {
                      "start": {
                        "line": 127,
                        "column": 4
                      },
                      "end": {
                        "line": 149,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 6023,
                    "end": 6065,
                    "loc": {
                      "start": {
                        "line": 150,
                        "column": 4
                      },
                      "end": {
                        "line": 150,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 6070,
                "end": 6134,
                "loc": {
                  "start": {
                    "line": 151,
                    "column": 4
                  },
                  "end": {
                    "line": 153,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 6070,
                  "end": 6077,
                  "loc": {
                    "start": {
                      "line": 151,
                      "column": 4
                    },
                    "end": {
                      "line": 151,
                      "column": 11
                    },
                    "identifierName": "getFrom"
                  },
                  "name": "getFrom",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 6078,
                    "end": 6086,
                    "loc": {
                      "start": {
                        "line": 151,
                        "column": 12
                      },
                      "end": {
                        "line": 151,
                        "column": 20
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 6088,
                  "end": 6134,
                  "loc": {
                    "start": {
                      "line": 151,
                      "column": 22
                    },
                    "end": {
                      "line": 153,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 6098,
                      "end": 6128,
                      "loc": {
                        "start": {
                          "line": 152,
                          "column": 8
                        },
                        "end": {
                          "line": 152,
                          "column": 38
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 6098,
                        "end": 6127,
                        "loc": {
                          "start": {
                            "line": 152,
                            "column": 8
                          },
                          "end": {
                            "line": 152,
                            "column": 37
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 6098,
                          "end": 6116,
                          "loc": {
                            "start": {
                              "line": 152,
                              "column": 8
                            },
                            "end": {
                              "line": 152,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 6117,
                            "end": 6126,
                            "loc": {
                              "start": {
                                "line": 152,
                                "column": 27
                              },
                              "end": {
                                "line": 152,
                                "column": 36
                              }
                            },
                            "extra": {
                              "rawValue": "getFrom",
                              "raw": "'getFrom'"
                            },
                            "value": "getFrom"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Gets the value of this field from the specified temporal object.\n     *\n     * This queries the temporal object for the value of this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#get}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.getFrom(temporal);\n     *   temporal = temporal.get(thisField);\n     * </pre>\n     * It is recommended to use the second approach, as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     ",
                    "start": 4966,
                    "end": 6018,
                    "loc": {
                      "start": {
                        "line": 127,
                        "column": 4
                      },
                      "end": {
                        "line": 149,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 6023,
                    "end": 6065,
                    "loc": {
                      "start": {
                        "line": 150,
                        "column": 4
                      },
                      "end": {
                        "line": 150,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Returns a copy of the specified temporal object with the value of this field set.\n     *\n     * This returns a new temporal object based on the specified one with the value for\n     * this field changed. For example, on a {@link LocalDate}, this could be used to\n     * set the year, month or day-of-month.\n     * The returned object has the same observable type as the specified object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is\n     * a date representing the 31st January, then changing the month to February would be unclear.\n     * In cases like this, the implementation is responsible for resolving the result.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.adjustInto(temporal);\n     *   temporal = temporal.with(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `with(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     ",
                    "start": 6140,
                    "end": 8157,
                    "loc": {
                      "start": {
                        "line": 155,
                        "column": 4
                      },
                      "end": {
                        "line": 192,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 8162,
                    "end": 8204,
                    "loc": {
                      "start": {
                        "line": 193,
                        "column": 4
                      },
                      "end": {
                        "line": 193,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 8209,
                "end": 8289,
                "loc": {
                  "start": {
                    "line": 194,
                    "column": 4
                  },
                  "end": {
                    "line": 196,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 8209,
                  "end": 8219,
                  "loc": {
                    "start": {
                      "line": 194,
                      "column": 4
                    },
                    "end": {
                      "line": 194,
                      "column": 14
                    },
                    "identifierName": "adjustInto"
                  },
                  "name": "adjustInto",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 8220,
                    "end": 8228,
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 15
                      },
                      "end": {
                        "line": 194,
                        "column": 23
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  },
                  {
                    "type": "Identifier",
                    "start": 8230,
                    "end": 8238,
                    "loc": {
                      "start": {
                        "line": 194,
                        "column": 25
                      },
                      "end": {
                        "line": 194,
                        "column": 33
                      },
                      "identifierName": "newValue"
                    },
                    "name": "newValue"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 8240,
                  "end": 8289,
                  "loc": {
                    "start": {
                      "line": 194,
                      "column": 35
                    },
                    "end": {
                      "line": 196,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 8250,
                      "end": 8283,
                      "loc": {
                        "start": {
                          "line": 195,
                          "column": 8
                        },
                        "end": {
                          "line": 195,
                          "column": 41
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 8250,
                        "end": 8282,
                        "loc": {
                          "start": {
                            "line": 195,
                            "column": 8
                          },
                          "end": {
                            "line": 195,
                            "column": 40
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 8250,
                          "end": 8268,
                          "loc": {
                            "start": {
                              "line": 195,
                              "column": 8
                            },
                            "end": {
                              "line": 195,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 8269,
                            "end": 8281,
                            "loc": {
                              "start": {
                                "line": 195,
                                "column": 27
                              },
                              "end": {
                                "line": 195,
                                "column": 39
                              }
                            },
                            "extra": {
                              "rawValue": "adjustInto",
                              "raw": "'adjustInto'"
                            },
                            "value": "adjustInto"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Returns a copy of the specified temporal object with the value of this field set.\n     *\n     * This returns a new temporal object based on the specified one with the value for\n     * this field changed. For example, on a {@link LocalDate}, this could be used to\n     * set the year, month or day-of-month.\n     * The returned object has the same observable type as the specified object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is\n     * a date representing the 31st January, then changing the month to February would be unclear.\n     * In cases like this, the implementation is responsible for resolving the result.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.adjustInto(temporal);\n     *   temporal = temporal.with(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `with(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     ",
                    "start": 6140,
                    "end": 8157,
                    "loc": {
                      "start": {
                        "line": 155,
                        "column": 4
                      },
                      "end": {
                        "line": 192,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 8162,
                    "end": 8204,
                    "loc": {
                      "start": {
                        "line": 193,
                        "column": 4
                      },
                      "end": {
                        "line": 193,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Checks if this field is supported by the temporal object.\n     *\n     * This determines whether the temporal accessor supports this field.\n     * If this returns false, the the temporal cannot be queried for this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#isSupported}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.isSupportedBy(temporal);\n     *   temporal = temporal.isSupported(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `isSupported(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should determine whether they are supported using the fields\n     * available in {@link ChronoField}.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     ",
                    "start": 8295,
                    "end": 9367,
                    "loc": {
                      "start": {
                        "line": 198,
                        "column": 4
                      },
                      "end": {
                        "line": 220,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 9372,
                    "end": 9414,
                    "loc": {
                      "start": {
                        "line": 221,
                        "column": 4
                      },
                      "end": {
                        "line": 221,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 9419,
                "end": 9495,
                "loc": {
                  "start": {
                    "line": 222,
                    "column": 4
                  },
                  "end": {
                    "line": 224,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 9419,
                  "end": 9432,
                  "loc": {
                    "start": {
                      "line": 222,
                      "column": 4
                    },
                    "end": {
                      "line": 222,
                      "column": 17
                    },
                    "identifierName": "isSupportedBy"
                  },
                  "name": "isSupportedBy",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 9433,
                    "end": 9441,
                    "loc": {
                      "start": {
                        "line": 222,
                        "column": 18
                      },
                      "end": {
                        "line": 222,
                        "column": 26
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 9443,
                  "end": 9495,
                  "loc": {
                    "start": {
                      "line": 222,
                      "column": 28
                    },
                    "end": {
                      "line": 224,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 9453,
                      "end": 9489,
                      "loc": {
                        "start": {
                          "line": 223,
                          "column": 8
                        },
                        "end": {
                          "line": 223,
                          "column": 44
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 9453,
                        "end": 9488,
                        "loc": {
                          "start": {
                            "line": 223,
                            "column": 8
                          },
                          "end": {
                            "line": 223,
                            "column": 43
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 9453,
                          "end": 9471,
                          "loc": {
                            "start": {
                              "line": 223,
                              "column": 8
                            },
                            "end": {
                              "line": 223,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 9472,
                            "end": 9487,
                            "loc": {
                              "start": {
                                "line": 223,
                                "column": 27
                              },
                              "end": {
                                "line": 223,
                                "column": 42
                              }
                            },
                            "extra": {
                              "rawValue": "isSupportedBy",
                              "raw": "'isSupportedBy'"
                            },
                            "value": "isSupportedBy"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Checks if this field is supported by the temporal object.\n     *\n     * This determines whether the temporal accessor supports this field.\n     * If this returns false, the the temporal cannot be queried for this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#isSupported}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.isSupportedBy(temporal);\n     *   temporal = temporal.isSupported(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `isSupported(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should determine whether they are supported using the fields\n     * available in {@link ChronoField}.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     ",
                    "start": 8295,
                    "end": 9367,
                    "loc": {
                      "start": {
                        "line": 198,
                        "column": 4
                      },
                      "end": {
                        "line": 220,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 9372,
                    "end": 9414,
                    "loc": {
                      "start": {
                        "line": 221,
                        "column": 4
                      },
                      "end": {
                        "line": 221,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * @return {string}\n     ",
                    "start": 9501,
                    "end": 9536,
                    "loc": {
                      "start": {
                        "line": 226,
                        "column": 4
                      },
                      "end": {
                        "line": 228,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 9541,
                "end": 9623,
                "loc": {
                  "start": {
                    "line": 229,
                    "column": 4
                  },
                  "end": {
                    "line": 231,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 9541,
                  "end": 9552,
                  "loc": {
                    "start": {
                      "line": 229,
                      "column": 4
                    },
                    "end": {
                      "line": 229,
                      "column": 15
                    },
                    "identifierName": "displayName"
                  },
                  "name": "displayName",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 9573,
                  "end": 9623,
                  "loc": {
                    "start": {
                      "line": 229,
                      "column": 36
                    },
                    "end": {
                      "line": 231,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 9583,
                      "end": 9617,
                      "loc": {
                        "start": {
                          "line": 230,
                          "column": 8
                        },
                        "end": {
                          "line": 230,
                          "column": 42
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 9583,
                        "end": 9616,
                        "loc": {
                          "start": {
                            "line": 230,
                            "column": 8
                          },
                          "end": {
                            "line": 230,
                            "column": 41
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 9583,
                          "end": 9601,
                          "loc": {
                            "start": {
                              "line": 230,
                              "column": 8
                            },
                            "end": {
                              "line": 230,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail",
                          "leadingComments": null
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 9602,
                            "end": 9615,
                            "loc": {
                              "start": {
                                "line": 230,
                                "column": 27
                              },
                              "end": {
                                "line": 230,
                                "column": 40
                              }
                            },
                            "extra": {
                              "rawValue": "displayName",
                              "raw": "'displayName'"
                            },
                            "value": "displayName"
                          }
                        ],
                        "leadingComments": null
                      },
                      "leadingComments": null
                    }
                  ],
                  "directives": [],
                  "leadingComments": [
                    {
                      "type": "CommentBlock",
                      "value": " TODO: locale ",
                      "start": 9553,
                      "end": 9571,
                      "loc": {
                        "start": {
                          "line": 229,
                          "column": 16
                        },
                        "end": {
                          "line": 229,
                          "column": 34
                        }
                      }
                    }
                  ],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * @return {string}\n     ",
                    "start": 9501,
                    "end": 9536,
                    "loc": {
                      "start": {
                        "line": 226,
                        "column": 4
                      },
                      "end": {
                        "line": 228,
                        "column": 7
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n    * @param {*} other\n    * @returns {boolean}\n    ",
                    "start": 9629,
                    "end": 9687,
                    "loc": {
                      "start": {
                        "line": 233,
                        "column": 4
                      },
                      "end": {
                        "line": 236,
                        "column": 6
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 9692,
                    "end": 9734,
                    "loc": {
                      "start": {
                        "line": 237,
                        "column": 4
                      },
                      "end": {
                        "line": 237,
                        "column": 46
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 9739,
                "end": 9798,
                "loc": {
                  "start": {
                    "line": 238,
                    "column": 4
                  },
                  "end": {
                    "line": 240,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 9739,
                  "end": 9745,
                  "loc": {
                    "start": {
                      "line": 238,
                      "column": 4
                    },
                    "end": {
                      "line": 238,
                      "column": 10
                    },
                    "identifierName": "equals"
                  },
                  "name": "equals",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 9746,
                    "end": 9751,
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 11
                      },
                      "end": {
                        "line": 238,
                        "column": 16
                      },
                      "identifierName": "other"
                    },
                    "name": "other"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 9753,
                  "end": 9798,
                  "loc": {
                    "start": {
                      "line": 238,
                      "column": 18
                    },
                    "end": {
                      "line": 240,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 9763,
                      "end": 9792,
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 8
                        },
                        "end": {
                          "line": 239,
                          "column": 37
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 9763,
                        "end": 9791,
                        "loc": {
                          "start": {
                            "line": 239,
                            "column": 8
                          },
                          "end": {
                            "line": 239,
                            "column": 36
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 9763,
                          "end": 9781,
                          "loc": {
                            "start": {
                              "line": 239,
                              "column": 8
                            },
                            "end": {
                              "line": 239,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 9782,
                            "end": 9790,
                            "loc": {
                              "start": {
                                "line": 239,
                                "column": 27
                              },
                              "end": {
                                "line": 239,
                                "column": 35
                              }
                            },
                            "extra": {
                              "rawValue": "equals",
                              "raw": "'equals'"
                            },
                            "value": "equals"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n    * @param {*} other\n    * @returns {boolean}\n    ",
                    "start": 9629,
                    "end": 9687,
                    "loc": {
                      "start": {
                        "line": 233,
                        "column": 4
                      },
                      "end": {
                        "line": 236,
                        "column": 6
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 9692,
                    "end": 9734,
                    "loc": {
                      "start": {
                        "line": 237,
                        "column": 4
                      },
                      "end": {
                        "line": 237,
                        "column": 46
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * @returns {string}\n     ",
                    "start": 9804,
                    "end": 9840,
                    "loc": {
                      "start": {
                        "line": 242,
                        "column": 4
                      },
                      "end": {
                        "line": 244,
                        "column": 7
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 9845,
                "end": 9895,
                "loc": {
                  "start": {
                    "line": 245,
                    "column": 4
                  },
                  "end": {
                    "line": 247,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 9845,
                  "end": 9849,
                  "loc": {
                    "start": {
                      "line": 245,
                      "column": 4
                    },
                    "end": {
                      "line": 245,
                      "column": 8
                    },
                    "identifierName": "name"
                  },
                  "name": "name",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "start": 9852,
                  "end": 9895,
                  "loc": {
                    "start": {
                      "line": 245,
                      "column": 11
                    },
                    "end": {
                      "line": 247,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 9862,
                      "end": 9889,
                      "loc": {
                        "start": {
                          "line": 246,
                          "column": 8
                        },
                        "end": {
                          "line": 246,
                          "column": 35
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 9862,
                        "end": 9888,
                        "loc": {
                          "start": {
                            "line": 246,
                            "column": 8
                          },
                          "end": {
                            "line": 246,
                            "column": 34
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 9862,
                          "end": 9880,
                          "loc": {
                            "start": {
                              "line": 246,
                              "column": 8
                            },
                            "end": {
                              "line": 246,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 9881,
                            "end": 9887,
                            "loc": {
                              "start": {
                                "line": 246,
                                "column": 27
                              },
                              "end": {
                                "line": 246,
                                "column": 33
                              }
                            },
                            "extra": {
                              "rawValue": "name",
                              "raw": "'name'"
                            },
                            "value": "name"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * @returns {string}\n     ",
                    "start": 9804,
                    "end": 9840,
                    "loc": {
                      "start": {
                        "line": 242,
                        "column": 4
                      },
                      "end": {
                        "line": 244,
                        "column": 7
                      }
                    }
                  }
                ]
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
              "start": 49,
              "end": 277,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 0
                },
                "end": {
                  "line": 7,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
              "start": 279,
              "end": 1099,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 25,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
            "start": 49,
            "end": 277,
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 7,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
            "start": 279,
            "end": 1099,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 25,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 49,
      "end": 277,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
      "start": 279,
      "end": 1099,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field represents a component of a date.\n     *\n     * @return {boolean} `true` if it is a component of a date, `false` otherwise.\n     ",
      "start": 1133,
      "end": 1296,
      "loc": {
        "start": {
          "line": 27,
          "column": 4
        },
        "end": {
          "line": 31,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field represents a component of a time.\n     *\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     ",
      "start": 1371,
      "end": 1534,
      "loc": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the unit that the field is measured in.\n     *\n     * The unit of the field is the period that varies within the range.\n     * For example, in the field 'MonthOfYear', the unit is 'Months'.\n     * See also {@link rangeUnit}.\n     *\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     ",
      "start": 1609,
      "end": 1947,
      "loc": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the range that the field is bound by.\n     * \n     * The range of the field is the period that the field varies within.\n     * For example, in the field 'MonthOfYear', the range is 'Years'.\n     * See also {@link baseUnit}.\n     * \n     * The range is never null. For example, the 'Year' field is shorthand for\n     * 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.\n     *\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     ",
      "start": 2016,
      "end": 2521,
      "loc": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the range of valid values for the field.\n     *\n     * All fields can be expressed as an integer.\n     * This method returns an object that describes the valid range for that value.\n     * This method is generally only applicable to the ISO-8601 calendar system.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @return {ValueRange} the range of valid values for the field.\n     ",
      "start": 2592,
      "end": 3191,
      "loc": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     *\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link range}, however this method refines the result\n     * using the temporal. For example, if the field is {@link DAY_OF_MONTH} the\n     * {@link range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@link range},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     * \n     ",
      "start": 3254,
      "end": 4830,
      "loc": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 4835,
      "end": 4877,
      "loc": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the value of this field from the specified temporal object.\n     *\n     * This queries the temporal object for the value of this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#get}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.getFrom(temporal);\n     *   temporal = temporal.get(thisField);\n     * </pre>\n     * It is recommended to use the second approach, as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     ",
      "start": 4966,
      "end": 6018,
      "loc": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 6023,
      "end": 6065,
      "loc": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns a copy of the specified temporal object with the value of this field set.\n     *\n     * This returns a new temporal object based on the specified one with the value for\n     * this field changed. For example, on a {@link LocalDate}, this could be used to\n     * set the year, month or day-of-month.\n     * The returned object has the same observable type as the specified object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is\n     * a date representing the 31st January, then changing the month to February would be unclear.\n     * In cases like this, the implementation is responsible for resolving the result.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.adjustInto(temporal);\n     *   temporal = temporal.with(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `with(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     ",
      "start": 6140,
      "end": 8157,
      "loc": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 8162,
      "end": 8204,
      "loc": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field is supported by the temporal object.\n     *\n     * This determines whether the temporal accessor supports this field.\n     * If this returns false, the the temporal cannot be queried for this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#isSupported}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.isSupportedBy(temporal);\n     *   temporal = temporal.isSupported(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `isSupported(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should determine whether they are supported using the fields\n     * available in {@link ChronoField}.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     ",
      "start": 8295,
      "end": 9367,
      "loc": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 9372,
      "end": 9414,
      "loc": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * @return {string}\n     ",
      "start": 9501,
      "end": 9536,
      "loc": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 7
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " TODO: locale ",
      "start": 9553,
      "end": 9571,
      "loc": {
        "start": {
          "line": 229,
          "column": 16
        },
        "end": {
          "line": 229,
          "column": 34
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n    * @param {*} other\n    * @returns {boolean}\n    ",
      "start": 9629,
      "end": 9687,
      "loc": {
        "start": {
          "line": 233,
          "column": 4
        },
        "end": {
          "line": 236,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 9692,
      "end": 9734,
      "loc": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * @returns {string}\n     ",
      "start": 9804,
      "end": 9840,
      "loc": {
        "start": {
          "line": 242,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 7
        }
      }
    }
  ],
  "tokens": [
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 0,
      "end": 6,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7,
      "end": 8,
      "loc": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 1,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 9,
      "end": 27,
      "loc": {
        "start": {
          "line": 1,
          "column": 9
        },
        "end": {
          "line": 1,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 28,
      "end": 29,
      "loc": {
        "start": {
          "line": 1,
          "column": 28
        },
        "end": {
          "line": 1,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 30,
      "end": 34,
      "loc": {
        "start": {
          "line": 1,
          "column": 30
        },
        "end": {
          "line": 1,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../assert",
      "start": 35,
      "end": 46,
      "loc": {
        "start": {
          "line": 1,
          "column": 35
        },
        "end": {
          "line": 1,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 46,
      "end": 47,
      "loc": {
        "start": {
          "line": 1,
          "column": 46
        },
        "end": {
          "line": 1,
          "column": 47
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 49,
      "end": 277,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n ",
      "start": 279,
      "end": 1099,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1100,
      "end": 1106,
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 1107,
      "end": 1112,
      "loc": {
        "start": {
          "line": 26,
          "column": 7
        },
        "end": {
          "line": 26,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalField",
      "start": 1113,
      "end": 1126,
      "loc": {
        "start": {
          "line": 26,
          "column": 13
        },
        "end": {
          "line": 26,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1127,
      "end": 1128,
      "loc": {
        "start": {
          "line": 26,
          "column": 27
        },
        "end": {
          "line": 26,
          "column": 28
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field represents a component of a date.\n     *\n     * @return {boolean} `true` if it is a component of a date, `false` otherwise.\n     ",
      "start": 1133,
      "end": 1296,
      "loc": {
        "start": {
          "line": 27,
          "column": 4
        },
        "end": {
          "line": 31,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "isDateBased",
      "start": 1301,
      "end": 1312,
      "loc": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 32,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1312,
      "end": 1313,
      "loc": {
        "start": {
          "line": 32,
          "column": 15
        },
        "end": {
          "line": 32,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1313,
      "end": 1314,
      "loc": {
        "start": {
          "line": 32,
          "column": 16
        },
        "end": {
          "line": 32,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1315,
      "end": 1316,
      "loc": {
        "start": {
          "line": 32,
          "column": 18
        },
        "end": {
          "line": 32,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 1325,
      "end": 1343,
      "loc": {
        "start": {
          "line": 33,
          "column": 8
        },
        "end": {
          "line": 33,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1343,
      "end": 1344,
      "loc": {
        "start": {
          "line": 33,
          "column": 26
        },
        "end": {
          "line": 33,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "isDateBased",
      "start": 1344,
      "end": 1357,
      "loc": {
        "start": {
          "line": 33,
          "column": 27
        },
        "end": {
          "line": 33,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1357,
      "end": 1358,
      "loc": {
        "start": {
          "line": 33,
          "column": 40
        },
        "end": {
          "line": 33,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1358,
      "end": 1359,
      "loc": {
        "start": {
          "line": 33,
          "column": 41
        },
        "end": {
          "line": 33,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1364,
      "end": 1365,
      "loc": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 34,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field represents a component of a time.\n     *\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     ",
      "start": 1371,
      "end": 1534,
      "loc": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "isTimeBased",
      "start": 1539,
      "end": 1550,
      "loc": {
        "start": {
          "line": 41,
          "column": 4
        },
        "end": {
          "line": 41,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1550,
      "end": 1551,
      "loc": {
        "start": {
          "line": 41,
          "column": 15
        },
        "end": {
          "line": 41,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1551,
      "end": 1552,
      "loc": {
        "start": {
          "line": 41,
          "column": 16
        },
        "end": {
          "line": 41,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1553,
      "end": 1554,
      "loc": {
        "start": {
          "line": 41,
          "column": 18
        },
        "end": {
          "line": 41,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 1563,
      "end": 1581,
      "loc": {
        "start": {
          "line": 42,
          "column": 8
        },
        "end": {
          "line": 42,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1581,
      "end": 1582,
      "loc": {
        "start": {
          "line": 42,
          "column": 26
        },
        "end": {
          "line": 42,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "isTimeBased",
      "start": 1582,
      "end": 1595,
      "loc": {
        "start": {
          "line": 42,
          "column": 27
        },
        "end": {
          "line": 42,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1595,
      "end": 1596,
      "loc": {
        "start": {
          "line": 42,
          "column": 40
        },
        "end": {
          "line": 42,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1596,
      "end": 1597,
      "loc": {
        "start": {
          "line": 42,
          "column": 41
        },
        "end": {
          "line": 42,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1602,
      "end": 1603,
      "loc": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 43,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the unit that the field is measured in.\n     *\n     * The unit of the field is the period that varies within the range.\n     * For example, in the field 'MonthOfYear', the unit is 'Months'.\n     * See also {@link rangeUnit}.\n     *\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     ",
      "start": 1609,
      "end": 1947,
      "loc": {
        "start": {
          "line": 45,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "baseUnit",
      "start": 1952,
      "end": 1960,
      "loc": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1960,
      "end": 1961,
      "loc": {
        "start": {
          "line": 54,
          "column": 12
        },
        "end": {
          "line": 54,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1961,
      "end": 1962,
      "loc": {
        "start": {
          "line": 54,
          "column": 13
        },
        "end": {
          "line": 54,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1963,
      "end": 1964,
      "loc": {
        "start": {
          "line": 54,
          "column": 15
        },
        "end": {
          "line": 54,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 1973,
      "end": 1991,
      "loc": {
        "start": {
          "line": 55,
          "column": 8
        },
        "end": {
          "line": 55,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1991,
      "end": 1992,
      "loc": {
        "start": {
          "line": 55,
          "column": 26
        },
        "end": {
          "line": 55,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "baseUnit",
      "start": 1992,
      "end": 2002,
      "loc": {
        "start": {
          "line": 55,
          "column": 27
        },
        "end": {
          "line": 55,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2002,
      "end": 2003,
      "loc": {
        "start": {
          "line": 55,
          "column": 37
        },
        "end": {
          "line": 55,
          "column": 38
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2003,
      "end": 2004,
      "loc": {
        "start": {
          "line": 55,
          "column": 38
        },
        "end": {
          "line": 55,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2009,
      "end": 2010,
      "loc": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 56,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the range that the field is bound by.\n     * \n     * The range of the field is the period that the field varies within.\n     * For example, in the field 'MonthOfYear', the range is 'Years'.\n     * See also {@link baseUnit}.\n     * \n     * The range is never null. For example, the 'Year' field is shorthand for\n     * 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.\n     *\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     ",
      "start": 2016,
      "end": 2521,
      "loc": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "rangeUnit",
      "start": 2526,
      "end": 2535,
      "loc": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2535,
      "end": 2536,
      "loc": {
        "start": {
          "line": 70,
          "column": 13
        },
        "end": {
          "line": 70,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2536,
      "end": 2537,
      "loc": {
        "start": {
          "line": 70,
          "column": 14
        },
        "end": {
          "line": 70,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2538,
      "end": 2539,
      "loc": {
        "start": {
          "line": 70,
          "column": 16
        },
        "end": {
          "line": 70,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 2548,
      "end": 2566,
      "loc": {
        "start": {
          "line": 71,
          "column": 8
        },
        "end": {
          "line": 71,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2566,
      "end": 2567,
      "loc": {
        "start": {
          "line": 71,
          "column": 26
        },
        "end": {
          "line": 71,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "rangeUnit",
      "start": 2567,
      "end": 2578,
      "loc": {
        "start": {
          "line": 71,
          "column": 27
        },
        "end": {
          "line": 71,
          "column": 38
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2578,
      "end": 2579,
      "loc": {
        "start": {
          "line": 71,
          "column": 38
        },
        "end": {
          "line": 71,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2579,
      "end": 2580,
      "loc": {
        "start": {
          "line": 71,
          "column": 39
        },
        "end": {
          "line": 71,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2585,
      "end": 2586,
      "loc": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the range of valid values for the field.\n     *\n     * All fields can be expressed as an integer.\n     * This method returns an object that describes the valid range for that value.\n     * This method is generally only applicable to the ISO-8601 calendar system.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @return {ValueRange} the range of valid values for the field.\n     ",
      "start": 2592,
      "end": 3191,
      "loc": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "range",
      "start": 3196,
      "end": 3201,
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3201,
      "end": 3202,
      "loc": {
        "start": {
          "line": 87,
          "column": 9
        },
        "end": {
          "line": 87,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3202,
      "end": 3203,
      "loc": {
        "start": {
          "line": 87,
          "column": 10
        },
        "end": {
          "line": 87,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3204,
      "end": 3205,
      "loc": {
        "start": {
          "line": 87,
          "column": 12
        },
        "end": {
          "line": 87,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 3214,
      "end": 3232,
      "loc": {
        "start": {
          "line": 88,
          "column": 8
        },
        "end": {
          "line": 88,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3232,
      "end": 3233,
      "loc": {
        "start": {
          "line": 88,
          "column": 26
        },
        "end": {
          "line": 88,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "range",
      "start": 3233,
      "end": 3240,
      "loc": {
        "start": {
          "line": 88,
          "column": 27
        },
        "end": {
          "line": 88,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3240,
      "end": 3241,
      "loc": {
        "start": {
          "line": 88,
          "column": 34
        },
        "end": {
          "line": 88,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3241,
      "end": 3242,
      "loc": {
        "start": {
          "line": 88,
          "column": 35
        },
        "end": {
          "line": 88,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3247,
      "end": 3248,
      "loc": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     *\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link range}, however this method refines the result\n     * using the temporal. For example, if the field is {@link DAY_OF_MONTH} the\n     * {@link range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@link range},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     * \n     ",
      "start": 3254,
      "end": 4830,
      "loc": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 4835,
      "end": 4877,
      "loc": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 122,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "rangeRefinedBy",
      "start": 4882,
      "end": 4896,
      "loc": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4896,
      "end": 4897,
      "loc": {
        "start": {
          "line": 123,
          "column": 18
        },
        "end": {
          "line": 123,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 4897,
      "end": 4905,
      "loc": {
        "start": {
          "line": 123,
          "column": 19
        },
        "end": {
          "line": 123,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4905,
      "end": 4906,
      "loc": {
        "start": {
          "line": 123,
          "column": 27
        },
        "end": {
          "line": 123,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4907,
      "end": 4908,
      "loc": {
        "start": {
          "line": 123,
          "column": 29
        },
        "end": {
          "line": 123,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 4917,
      "end": 4935,
      "loc": {
        "start": {
          "line": 124,
          "column": 8
        },
        "end": {
          "line": 124,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4935,
      "end": 4936,
      "loc": {
        "start": {
          "line": 124,
          "column": 26
        },
        "end": {
          "line": 124,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "rangeRefinedBy",
      "start": 4936,
      "end": 4952,
      "loc": {
        "start": {
          "line": 124,
          "column": 27
        },
        "end": {
          "line": 124,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4952,
      "end": 4953,
      "loc": {
        "start": {
          "line": 124,
          "column": 43
        },
        "end": {
          "line": 124,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4953,
      "end": 4954,
      "loc": {
        "start": {
          "line": 124,
          "column": 44
        },
        "end": {
          "line": 124,
          "column": 45
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4959,
      "end": 4960,
      "loc": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Gets the value of this field from the specified temporal object.\n     *\n     * This queries the temporal object for the value of this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#get}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.getFrom(temporal);\n     *   temporal = temporal.get(thisField);\n     * </pre>\n     * It is recommended to use the second approach, as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     ",
      "start": 4966,
      "end": 6018,
      "loc": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 149,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 6023,
      "end": 6065,
      "loc": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "getFrom",
      "start": 6070,
      "end": 6077,
      "loc": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6077,
      "end": 6078,
      "loc": {
        "start": {
          "line": 151,
          "column": 11
        },
        "end": {
          "line": 151,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 6078,
      "end": 6086,
      "loc": {
        "start": {
          "line": 151,
          "column": 12
        },
        "end": {
          "line": 151,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6086,
      "end": 6087,
      "loc": {
        "start": {
          "line": 151,
          "column": 20
        },
        "end": {
          "line": 151,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6088,
      "end": 6089,
      "loc": {
        "start": {
          "line": 151,
          "column": 22
        },
        "end": {
          "line": 151,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 6098,
      "end": 6116,
      "loc": {
        "start": {
          "line": 152,
          "column": 8
        },
        "end": {
          "line": 152,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6116,
      "end": 6117,
      "loc": {
        "start": {
          "line": 152,
          "column": 26
        },
        "end": {
          "line": 152,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "getFrom",
      "start": 6117,
      "end": 6126,
      "loc": {
        "start": {
          "line": 152,
          "column": 27
        },
        "end": {
          "line": 152,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6126,
      "end": 6127,
      "loc": {
        "start": {
          "line": 152,
          "column": 36
        },
        "end": {
          "line": 152,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6127,
      "end": 6128,
      "loc": {
        "start": {
          "line": 152,
          "column": 37
        },
        "end": {
          "line": 152,
          "column": 38
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6133,
      "end": 6134,
      "loc": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Returns a copy of the specified temporal object with the value of this field set.\n     *\n     * This returns a new temporal object based on the specified one with the value for\n     * this field changed. For example, on a {@link LocalDate}, this could be used to\n     * set the year, month or day-of-month.\n     * The returned object has the same observable type as the specified object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is\n     * a date representing the 31st January, then changing the month to February would be unclear.\n     * In cases like this, the implementation is responsible for resolving the result.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.adjustInto(temporal);\n     *   temporal = temporal.with(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `with(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     ",
      "start": 6140,
      "end": 8157,
      "loc": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 8162,
      "end": 8204,
      "loc": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "adjustInto",
      "start": 8209,
      "end": 8219,
      "loc": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8219,
      "end": 8220,
      "loc": {
        "start": {
          "line": 194,
          "column": 14
        },
        "end": {
          "line": 194,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 8220,
      "end": 8228,
      "loc": {
        "start": {
          "line": 194,
          "column": 15
        },
        "end": {
          "line": 194,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8228,
      "end": 8229,
      "loc": {
        "start": {
          "line": 194,
          "column": 23
        },
        "end": {
          "line": 194,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "newValue",
      "start": 8230,
      "end": 8238,
      "loc": {
        "start": {
          "line": 194,
          "column": 25
        },
        "end": {
          "line": 194,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8238,
      "end": 8239,
      "loc": {
        "start": {
          "line": 194,
          "column": 33
        },
        "end": {
          "line": 194,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8240,
      "end": 8241,
      "loc": {
        "start": {
          "line": 194,
          "column": 35
        },
        "end": {
          "line": 194,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 8250,
      "end": 8268,
      "loc": {
        "start": {
          "line": 195,
          "column": 8
        },
        "end": {
          "line": 195,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8268,
      "end": 8269,
      "loc": {
        "start": {
          "line": 195,
          "column": 26
        },
        "end": {
          "line": 195,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "adjustInto",
      "start": 8269,
      "end": 8281,
      "loc": {
        "start": {
          "line": 195,
          "column": 27
        },
        "end": {
          "line": 195,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8281,
      "end": 8282,
      "loc": {
        "start": {
          "line": 195,
          "column": 39
        },
        "end": {
          "line": 195,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8282,
      "end": 8283,
      "loc": {
        "start": {
          "line": 195,
          "column": 40
        },
        "end": {
          "line": 195,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8288,
      "end": 8289,
      "loc": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Checks if this field is supported by the temporal object.\n     *\n     * This determines whether the temporal accessor supports this field.\n     * If this returns false, the the temporal cannot be queried for this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#isSupported}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.isSupportedBy(temporal);\n     *   temporal = temporal.isSupported(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `isSupported(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should determine whether they are supported using the fields\n     * available in {@link ChronoField}.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     ",
      "start": 8295,
      "end": 9367,
      "loc": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 9372,
      "end": 9414,
      "loc": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 221,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "isSupportedBy",
      "start": 9419,
      "end": 9432,
      "loc": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9432,
      "end": 9433,
      "loc": {
        "start": {
          "line": 222,
          "column": 17
        },
        "end": {
          "line": 222,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 9433,
      "end": 9441,
      "loc": {
        "start": {
          "line": 222,
          "column": 18
        },
        "end": {
          "line": 222,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9441,
      "end": 9442,
      "loc": {
        "start": {
          "line": 222,
          "column": 26
        },
        "end": {
          "line": 222,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9443,
      "end": 9444,
      "loc": {
        "start": {
          "line": 222,
          "column": 28
        },
        "end": {
          "line": 222,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 9453,
      "end": 9471,
      "loc": {
        "start": {
          "line": 223,
          "column": 8
        },
        "end": {
          "line": 223,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9471,
      "end": 9472,
      "loc": {
        "start": {
          "line": 223,
          "column": 26
        },
        "end": {
          "line": 223,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "isSupportedBy",
      "start": 9472,
      "end": 9487,
      "loc": {
        "start": {
          "line": 223,
          "column": 27
        },
        "end": {
          "line": 223,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9487,
      "end": 9488,
      "loc": {
        "start": {
          "line": 223,
          "column": 42
        },
        "end": {
          "line": 223,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9488,
      "end": 9489,
      "loc": {
        "start": {
          "line": 223,
          "column": 43
        },
        "end": {
          "line": 223,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9494,
      "end": 9495,
      "loc": {
        "start": {
          "line": 224,
          "column": 4
        },
        "end": {
          "line": 224,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * @return {string}\n     ",
      "start": 9501,
      "end": 9536,
      "loc": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "displayName",
      "start": 9541,
      "end": 9552,
      "loc": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9552,
      "end": 9553,
      "loc": {
        "start": {
          "line": 229,
          "column": 15
        },
        "end": {
          "line": 229,
          "column": 16
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": " TODO: locale ",
      "start": 9553,
      "end": 9571,
      "loc": {
        "start": {
          "line": 229,
          "column": 16
        },
        "end": {
          "line": 229,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9571,
      "end": 9572,
      "loc": {
        "start": {
          "line": 229,
          "column": 34
        },
        "end": {
          "line": 229,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9573,
      "end": 9574,
      "loc": {
        "start": {
          "line": 229,
          "column": 36
        },
        "end": {
          "line": 229,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 9583,
      "end": 9601,
      "loc": {
        "start": {
          "line": 230,
          "column": 8
        },
        "end": {
          "line": 230,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9601,
      "end": 9602,
      "loc": {
        "start": {
          "line": 230,
          "column": 26
        },
        "end": {
          "line": 230,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "displayName",
      "start": 9602,
      "end": 9615,
      "loc": {
        "start": {
          "line": 230,
          "column": 27
        },
        "end": {
          "line": 230,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9615,
      "end": 9616,
      "loc": {
        "start": {
          "line": 230,
          "column": 40
        },
        "end": {
          "line": 230,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9616,
      "end": 9617,
      "loc": {
        "start": {
          "line": 230,
          "column": 41
        },
        "end": {
          "line": 230,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9622,
      "end": 9623,
      "loc": {
        "start": {
          "line": 231,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n    * @param {*} other\n    * @returns {boolean}\n    ",
      "start": 9629,
      "end": 9687,
      "loc": {
        "start": {
          "line": 233,
          "column": 4
        },
        "end": {
          "line": 236,
          "column": 6
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 9692,
      "end": 9734,
      "loc": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 237,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "equals",
      "start": 9739,
      "end": 9745,
      "loc": {
        "start": {
          "line": 238,
          "column": 4
        },
        "end": {
          "line": 238,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9745,
      "end": 9746,
      "loc": {
        "start": {
          "line": 238,
          "column": 10
        },
        "end": {
          "line": 238,
          "column": 11
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "other",
      "start": 9746,
      "end": 9751,
      "loc": {
        "start": {
          "line": 238,
          "column": 11
        },
        "end": {
          "line": 238,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9751,
      "end": 9752,
      "loc": {
        "start": {
          "line": 238,
          "column": 16
        },
        "end": {
          "line": 238,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9753,
      "end": 9754,
      "loc": {
        "start": {
          "line": 238,
          "column": 18
        },
        "end": {
          "line": 238,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 9763,
      "end": 9781,
      "loc": {
        "start": {
          "line": 239,
          "column": 8
        },
        "end": {
          "line": 239,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9781,
      "end": 9782,
      "loc": {
        "start": {
          "line": 239,
          "column": 26
        },
        "end": {
          "line": 239,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "equals",
      "start": 9782,
      "end": 9790,
      "loc": {
        "start": {
          "line": 239,
          "column": 27
        },
        "end": {
          "line": 239,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9790,
      "end": 9791,
      "loc": {
        "start": {
          "line": 239,
          "column": 35
        },
        "end": {
          "line": 239,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9791,
      "end": 9792,
      "loc": {
        "start": {
          "line": 239,
          "column": 36
        },
        "end": {
          "line": 239,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9797,
      "end": 9798,
      "loc": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * @returns {string}\n     ",
      "start": 9804,
      "end": 9840,
      "loc": {
        "start": {
          "line": 242,
          "column": 4
        },
        "end": {
          "line": 244,
          "column": 7
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 9845,
      "end": 9849,
      "loc": {
        "start": {
          "line": 245,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9849,
      "end": 9850,
      "loc": {
        "start": {
          "line": 245,
          "column": 8
        },
        "end": {
          "line": 245,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9850,
      "end": 9851,
      "loc": {
        "start": {
          "line": 245,
          "column": 9
        },
        "end": {
          "line": 245,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9852,
      "end": 9853,
      "loc": {
        "start": {
          "line": 245,
          "column": 11
        },
        "end": {
          "line": 245,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 9862,
      "end": 9880,
      "loc": {
        "start": {
          "line": 246,
          "column": 8
        },
        "end": {
          "line": 246,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9880,
      "end": 9881,
      "loc": {
        "start": {
          "line": 246,
          "column": 26
        },
        "end": {
          "line": 246,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "name",
      "start": 9881,
      "end": 9887,
      "loc": {
        "start": {
          "line": 246,
          "column": 27
        },
        "end": {
          "line": 246,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9887,
      "end": 9888,
      "loc": {
        "start": {
          "line": 246,
          "column": 33
        },
        "end": {
          "line": 246,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9888,
      "end": 9889,
      "loc": {
        "start": {
          "line": 246,
          "column": 34
        },
        "end": {
          "line": 246,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9894,
      "end": 9895,
      "loc": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 247,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9896,
      "end": 9897,
      "loc": {
        "start": {
          "line": 248,
          "column": 0
        },
        "end": {
          "line": 248,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9898,
      "end": 9898,
      "loc": {
        "start": {
          "line": 249,
          "column": 0
        },
        "end": {
          "line": 249,
          "column": 0
        }
      }
    }
  ]
}