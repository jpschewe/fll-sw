{
  "type": "File",
  "start": 0,
  "end": 4413,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 108,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 4413,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 108,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 229,
        "end": 274,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 45
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 237,
            "end": 255,
            "loc": {
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 26
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 237,
              "end": 255,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 26
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail",
              "leadingComments": null
            },
            "local": {
              "type": "Identifier",
              "start": 237,
              "end": 255,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 26
                },
                "identifierName": "abstractMethodFail"
              },
              "name": "abstractMethodFail"
            },
            "leadingComments": null
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 262,
          "end": 273,
          "loc": {
            "start": {
              "line": 7,
              "column": 33
            },
            "end": {
              "line": 7,
              "column": 44
            }
          },
          "extra": {
            "rawValue": "../assert",
            "raw": "'../assert'"
          },
          "value": "../assert"
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
            "start": 0,
            "end": 227,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ImportDeclaration",
        "start": 275,
        "end": 304,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 29
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 283,
            "end": 287,
            "loc": {
              "start": {
                "line": 8,
                "column": 8
              },
              "end": {
                "line": 8,
                "column": 12
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 283,
              "end": 287,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 12
                },
                "identifierName": "Enum"
              },
              "name": "Enum"
            },
            "local": {
              "type": "Identifier",
              "start": 283,
              "end": 287,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 12
                },
                "identifierName": "Enum"
              },
              "name": "Enum"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 294,
          "end": 303,
          "loc": {
            "start": {
              "line": 8,
              "column": 19
            },
            "end": {
              "line": 8,
              "column": 28
            }
          },
          "extra": {
            "rawValue": "../Enum",
            "raw": "'../Enum'"
          },
          "value": "../Enum"
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
            "start": 307,
            "end": 1824,
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1825,
        "end": 3899,
        "loc": {
          "start": {
            "line": 47,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "ClassDeclaration",
          "start": 1832,
          "end": 3899,
          "loc": {
            "start": {
              "line": 47,
              "column": 7
            },
            "end": {
              "line": 92,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 1838,
            "end": 1851,
            "loc": {
              "start": {
                "line": 47,
                "column": 13
              },
              "end": {
                "line": 47,
                "column": 26
              },
              "identifierName": "TemporalQuery"
            },
            "name": "TemporalQuery",
            "leadingComments": null
          },
          "superClass": {
            "type": "Identifier",
            "start": 1861,
            "end": 1865,
            "loc": {
              "start": {
                "line": 47,
                "column": 36
              },
              "end": {
                "line": 47,
                "column": 40
              },
              "identifierName": "Enum"
            },
            "name": "Enum"
          },
          "body": {
            "type": "ClassBody",
            "start": 1866,
            "end": 3899,
            "loc": {
              "start": {
                "line": 47,
                "column": 41
              },
              "end": {
                "line": 92,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassMethod",
                "start": 3829,
                "end": 3896,
                "loc": {
                  "start": {
                    "line": 88,
                    "column": 4
                  },
                  "end": {
                    "line": 90,
                    "column": 5
                  }
                },
                "static": false,
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 3829,
                  "end": 3838,
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 4
                    },
                    "end": {
                      "line": 88,
                      "column": 13
                    },
                    "identifierName": "queryFrom"
                  },
                  "name": "queryFrom",
                  "leadingComments": null
                },
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 3839,
                    "end": 3847,
                    "loc": {
                      "start": {
                        "line": 88,
                        "column": 14
                      },
                      "end": {
                        "line": 88,
                        "column": 22
                      },
                      "identifierName": "temporal"
                    },
                    "name": "temporal"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 3848,
                  "end": 3896,
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 23
                    },
                    "end": {
                      "line": 90,
                      "column": 5
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 3858,
                      "end": 3890,
                      "loc": {
                        "start": {
                          "line": 89,
                          "column": 8
                        },
                        "end": {
                          "line": 89,
                          "column": 40
                        }
                      },
                      "expression": {
                        "type": "CallExpression",
                        "start": 3858,
                        "end": 3889,
                        "loc": {
                          "start": {
                            "line": 89,
                            "column": 8
                          },
                          "end": {
                            "line": 89,
                            "column": 39
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 3858,
                          "end": 3876,
                          "loc": {
                            "start": {
                              "line": 89,
                              "column": 8
                            },
                            "end": {
                              "line": 89,
                              "column": 26
                            },
                            "identifierName": "abstractMethodFail"
                          },
                          "name": "abstractMethodFail"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 3877,
                            "end": 3888,
                            "loc": {
                              "start": {
                                "line": 89,
                                "column": 27
                              },
                              "end": {
                                "line": 89,
                                "column": 38
                              }
                            },
                            "extra": {
                              "rawValue": "queryFrom",
                              "raw": "'queryFrom'"
                            },
                            "value": "queryFrom"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
                    "start": 1872,
                    "end": 3777,
                    "loc": {
                      "start": {
                        "line": 48,
                        "column": 4
                      },
                      "end": {
                        "line": 86,
                        "column": 7
                      }
                    }
                  },
                  {
                    "type": "CommentLine",
                    "value": " eslint-disable-next-line no-unused-vars",
                    "start": 3782,
                    "end": 3824,
                    "loc": {
                      "start": {
                        "line": 87,
                        "column": 4
                      },
                      "end": {
                        "line": 87,
                        "column": 46
                      }
                    }
                  }
                ]
              }
            ],
            "trailingComments": null
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
              "start": 307,
              "end": 1824,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 0
                },
                "end": {
                  "line": 46,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
              "start": 3901,
              "end": 4172,
              "loc": {
                "start": {
                  "line": 94,
                  "column": 0
                },
                "end": {
                  "line": 99,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
            "start": 307,
            "end": 1824,
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
            "start": 3901,
            "end": 4172,
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 4173,
        "end": 4412,
        "loc": {
          "start": {
            "line": 100,
            "column": 0
          },
          "end": {
            "line": 107,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 4180,
          "end": 4412,
          "loc": {
            "start": {
              "line": 100,
              "column": 7
            },
            "end": {
              "line": 107,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 4189,
            "end": 4208,
            "loc": {
              "start": {
                "line": 100,
                "column": 16
              },
              "end": {
                "line": 100,
                "column": 35
              },
              "identifierName": "createTemporalQuery"
            },
            "name": "createTemporalQuery",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 4209,
              "end": 4213,
              "loc": {
                "start": {
                  "line": 100,
                  "column": 36
                },
                "end": {
                  "line": 100,
                  "column": 40
                },
                "identifierName": "name"
              },
              "name": "name"
            },
            {
              "type": "Identifier",
              "start": 4215,
              "end": 4232,
              "loc": {
                "start": {
                  "line": 100,
                  "column": 42
                },
                "end": {
                  "line": 100,
                  "column": 59
                },
                "identifierName": "queryFromFunction"
              },
              "name": "queryFromFunction"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 4234,
            "end": 4412,
            "loc": {
              "start": {
                "line": 100,
                "column": 61
              },
              "end": {
                "line": 107,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassDeclaration",
                "start": 4240,
                "end": 4298,
                "loc": {
                  "start": {
                    "line": 101,
                    "column": 4
                  },
                  "end": {
                    "line": 103,
                    "column": 5
                  }
                },
                "id": {
                  "type": "Identifier",
                  "start": 4246,
                  "end": 4267,
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 10
                    },
                    "end": {
                      "line": 101,
                      "column": 31
                    },
                    "identifierName": "ExtendedTemporalQuery"
                  },
                  "name": "ExtendedTemporalQuery"
                },
                "superClass": {
                  "type": "Identifier",
                  "start": 4276,
                  "end": 4289,
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 40
                    },
                    "end": {
                      "line": 101,
                      "column": 53
                    },
                    "identifierName": "TemporalQuery"
                  },
                  "name": "TemporalQuery"
                },
                "body": {
                  "type": "ClassBody",
                  "start": 4290,
                  "end": 4298,
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 54
                    },
                    "end": {
                      "line": 103,
                      "column": 5
                    }
                  },
                  "body": []
                }
              },
              {
                "type": "ExpressionStatement",
                "start": 4304,
                "end": 4366,
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 4
                  },
                  "end": {
                    "line": 105,
                    "column": 66
                  }
                },
                "expression": {
                  "type": "AssignmentExpression",
                  "start": 4304,
                  "end": 4365,
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 4
                    },
                    "end": {
                      "line": 105,
                      "column": 65
                    }
                  },
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "start": 4304,
                    "end": 4345,
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 4
                      },
                      "end": {
                        "line": 105,
                        "column": 45
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 4304,
                      "end": 4335,
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 4
                        },
                        "end": {
                          "line": 105,
                          "column": 35
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 4304,
                        "end": 4325,
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 4
                          },
                          "end": {
                            "line": 105,
                            "column": 25
                          },
                          "identifierName": "ExtendedTemporalQuery"
                        },
                        "name": "ExtendedTemporalQuery"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 4326,
                        "end": 4335,
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 26
                          },
                          "end": {
                            "line": 105,
                            "column": 35
                          },
                          "identifierName": "prototype"
                        },
                        "name": "prototype"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 4336,
                      "end": 4345,
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 36
                        },
                        "end": {
                          "line": 105,
                          "column": 45
                        },
                        "identifierName": "queryFrom"
                      },
                      "name": "queryFrom"
                    },
                    "computed": false
                  },
                  "right": {
                    "type": "Identifier",
                    "start": 4348,
                    "end": 4365,
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 48
                      },
                      "end": {
                        "line": 105,
                        "column": 65
                      },
                      "identifierName": "queryFromFunction"
                    },
                    "name": "queryFromFunction"
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "start": 4371,
                "end": 4410,
                "loc": {
                  "start": {
                    "line": 106,
                    "column": 4
                  },
                  "end": {
                    "line": 106,
                    "column": 43
                  }
                },
                "argument": {
                  "type": "NewExpression",
                  "start": 4378,
                  "end": 4409,
                  "loc": {
                    "start": {
                      "line": 106,
                      "column": 11
                    },
                    "end": {
                      "line": 106,
                      "column": 42
                    }
                  },
                  "callee": {
                    "type": "Identifier",
                    "start": 4382,
                    "end": 4403,
                    "loc": {
                      "start": {
                        "line": 106,
                        "column": 15
                      },
                      "end": {
                        "line": 106,
                        "column": 36
                      },
                      "identifierName": "ExtendedTemporalQuery"
                    },
                    "name": "ExtendedTemporalQuery"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 4404,
                      "end": 4408,
                      "loc": {
                        "start": {
                          "line": 106,
                          "column": 37
                        },
                        "end": {
                          "line": 106,
                          "column": 41
                        },
                        "identifierName": "name"
                      },
                      "name": "name"
                    }
                  ]
                }
              }
            ],
            "directives": []
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
              "start": 3901,
              "end": 4172,
              "loc": {
                "start": {
                  "line": 94,
                  "column": 0
                },
                "end": {
                  "line": 99,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
            "start": 3901,
            "end": 4172,
            "loc": {
              "start": {
                "line": 94,
                "column": 0
              },
              "end": {
                "line": 99,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 0,
      "end": 227,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
      "start": 307,
      "end": 1824,
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 1872,
      "end": 3777,
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 3782,
      "end": 3824,
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 46
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
      "start": 3901,
      "end": 4172,
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n ",
      "start": 0,
      "end": 227,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 229,
      "end": 235,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 236,
      "end": 237,
      "loc": {
        "start": {
          "line": 7,
          "column": 7
        },
        "end": {
          "line": 7,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 237,
      "end": 255,
      "loc": {
        "start": {
          "line": 7,
          "column": 8
        },
        "end": {
          "line": 7,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 255,
      "end": 256,
      "loc": {
        "start": {
          "line": 7,
          "column": 26
        },
        "end": {
          "line": 7,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 257,
      "end": 261,
      "loc": {
        "start": {
          "line": 7,
          "column": 28
        },
        "end": {
          "line": 7,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../assert",
      "start": 262,
      "end": 273,
      "loc": {
        "start": {
          "line": 7,
          "column": 33
        },
        "end": {
          "line": 7,
          "column": 44
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 273,
      "end": 274,
      "loc": {
        "start": {
          "line": 7,
          "column": 44
        },
        "end": {
          "line": 7,
          "column": 45
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 275,
      "end": 281,
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 282,
      "end": 283,
      "loc": {
        "start": {
          "line": 8,
          "column": 7
        },
        "end": {
          "line": 8,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Enum",
      "start": 283,
      "end": 287,
      "loc": {
        "start": {
          "line": 8,
          "column": 8
        },
        "end": {
          "line": 8,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 287,
      "end": 288,
      "loc": {
        "start": {
          "line": 8,
          "column": 12
        },
        "end": {
          "line": 8,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 289,
      "end": 293,
      "loc": {
        "start": {
          "line": 8,
          "column": 14
        },
        "end": {
          "line": 8,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../Enum",
      "start": 294,
      "end": 303,
      "loc": {
        "start": {
          "line": 8,
          "column": 19
        },
        "end": {
          "line": 8,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 303,
      "end": 304,
      "loc": {
        "start": {
          "line": 8,
          "column": 28
        },
        "end": {
          "line": 8,
          "column": 29
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n ",
      "start": 307,
      "end": 1824,
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1825,
      "end": 1831,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 1832,
      "end": 1837,
      "loc": {
        "start": {
          "line": 47,
          "column": 7
        },
        "end": {
          "line": 47,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalQuery",
      "start": 1838,
      "end": 1851,
      "loc": {
        "start": {
          "line": 47,
          "column": 13
        },
        "end": {
          "line": 47,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "extends",
        "keyword": "extends",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "extends",
      "start": 1853,
      "end": 1860,
      "loc": {
        "start": {
          "line": 47,
          "column": 28
        },
        "end": {
          "line": 47,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Enum",
      "start": 1861,
      "end": 1865,
      "loc": {
        "start": {
          "line": 47,
          "column": 36
        },
        "end": {
          "line": 47,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1866,
      "end": 1867,
      "loc": {
        "start": {
          "line": 47,
          "column": 41
        },
        "end": {
          "line": 47,
          "column": 42
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
      "start": 1872,
      "end": 3777,
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 7
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " eslint-disable-next-line no-unused-vars",
      "start": 3782,
      "end": 3824,
      "loc": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 87,
          "column": 46
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "queryFrom",
      "start": 3829,
      "end": 3838,
      "loc": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 88,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3838,
      "end": 3839,
      "loc": {
        "start": {
          "line": 88,
          "column": 13
        },
        "end": {
          "line": 88,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "temporal",
      "start": 3839,
      "end": 3847,
      "loc": {
        "start": {
          "line": 88,
          "column": 14
        },
        "end": {
          "line": 88,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3847,
      "end": 3848,
      "loc": {
        "start": {
          "line": 88,
          "column": 22
        },
        "end": {
          "line": 88,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3848,
      "end": 3849,
      "loc": {
        "start": {
          "line": 88,
          "column": 23
        },
        "end": {
          "line": 88,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "abstractMethodFail",
      "start": 3858,
      "end": 3876,
      "loc": {
        "start": {
          "line": 89,
          "column": 8
        },
        "end": {
          "line": 89,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3876,
      "end": 3877,
      "loc": {
        "start": {
          "line": 89,
          "column": 26
        },
        "end": {
          "line": 89,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "queryFrom",
      "start": 3877,
      "end": 3888,
      "loc": {
        "start": {
          "line": 89,
          "column": 27
        },
        "end": {
          "line": 89,
          "column": 38
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3888,
      "end": 3889,
      "loc": {
        "start": {
          "line": 89,
          "column": 38
        },
        "end": {
          "line": 89,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3889,
      "end": 3890,
      "loc": {
        "start": {
          "line": 89,
          "column": 39
        },
        "end": {
          "line": 89,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3895,
      "end": 3896,
      "loc": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 90,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3898,
      "end": 3899,
      "loc": {
        "start": {
          "line": 92,
          "column": 0
        },
        "end": {
          "line": 92,
          "column": 1
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n ",
      "start": 3901,
      "end": 4172,
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 4173,
      "end": 4179,
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 4180,
      "end": 4188,
      "loc": {
        "start": {
          "line": 100,
          "column": 7
        },
        "end": {
          "line": 100,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "createTemporalQuery",
      "start": 4189,
      "end": 4208,
      "loc": {
        "start": {
          "line": 100,
          "column": 16
        },
        "end": {
          "line": 100,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4208,
      "end": 4209,
      "loc": {
        "start": {
          "line": 100,
          "column": 35
        },
        "end": {
          "line": 100,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 4209,
      "end": 4213,
      "loc": {
        "start": {
          "line": 100,
          "column": 36
        },
        "end": {
          "line": 100,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4213,
      "end": 4214,
      "loc": {
        "start": {
          "line": 100,
          "column": 40
        },
        "end": {
          "line": 100,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "queryFromFunction",
      "start": 4215,
      "end": 4232,
      "loc": {
        "start": {
          "line": 100,
          "column": 42
        },
        "end": {
          "line": 100,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4232,
      "end": 4233,
      "loc": {
        "start": {
          "line": 100,
          "column": 59
        },
        "end": {
          "line": 100,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4234,
      "end": 4235,
      "loc": {
        "start": {
          "line": 100,
          "column": 61
        },
        "end": {
          "line": 100,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 4240,
      "end": 4245,
      "loc": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "ExtendedTemporalQuery",
      "start": 4246,
      "end": 4267,
      "loc": {
        "start": {
          "line": 101,
          "column": 10
        },
        "end": {
          "line": 101,
          "column": 31
        }
      }
    },
    {
      "type": {
        "label": "extends",
        "keyword": "extends",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "extends",
      "start": 4268,
      "end": 4275,
      "loc": {
        "start": {
          "line": 101,
          "column": 32
        },
        "end": {
          "line": 101,
          "column": 39
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TemporalQuery",
      "start": 4276,
      "end": 4289,
      "loc": {
        "start": {
          "line": 101,
          "column": 40
        },
        "end": {
          "line": 101,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4290,
      "end": 4291,
      "loc": {
        "start": {
          "line": 101,
          "column": 54
        },
        "end": {
          "line": 101,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4297,
      "end": 4298,
      "loc": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "ExtendedTemporalQuery",
      "start": 4304,
      "end": 4325,
      "loc": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4325,
      "end": 4326,
      "loc": {
        "start": {
          "line": 105,
          "column": 25
        },
        "end": {
          "line": 105,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "prototype",
      "start": 4326,
      "end": 4335,
      "loc": {
        "start": {
          "line": 105,
          "column": 26
        },
        "end": {
          "line": 105,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4335,
      "end": 4336,
      "loc": {
        "start": {
          "line": 105,
          "column": 35
        },
        "end": {
          "line": 105,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "queryFrom",
      "start": 4336,
      "end": 4345,
      "loc": {
        "start": {
          "line": 105,
          "column": 36
        },
        "end": {
          "line": 105,
          "column": 45
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 4346,
      "end": 4347,
      "loc": {
        "start": {
          "line": 105,
          "column": 46
        },
        "end": {
          "line": 105,
          "column": 47
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "queryFromFunction",
      "start": 4348,
      "end": 4365,
      "loc": {
        "start": {
          "line": 105,
          "column": 48
        },
        "end": {
          "line": 105,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4365,
      "end": 4366,
      "loc": {
        "start": {
          "line": 105,
          "column": 65
        },
        "end": {
          "line": 105,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 4371,
      "end": 4377,
      "loc": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "new",
        "keyword": "new",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "new",
      "start": 4378,
      "end": 4381,
      "loc": {
        "start": {
          "line": 106,
          "column": 11
        },
        "end": {
          "line": 106,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "ExtendedTemporalQuery",
      "start": 4382,
      "end": 4403,
      "loc": {
        "start": {
          "line": 106,
          "column": 15
        },
        "end": {
          "line": 106,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4403,
      "end": 4404,
      "loc": {
        "start": {
          "line": 106,
          "column": 36
        },
        "end": {
          "line": 106,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 4404,
      "end": 4408,
      "loc": {
        "start": {
          "line": 106,
          "column": 37
        },
        "end": {
          "line": 106,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4408,
      "end": 4409,
      "loc": {
        "start": {
          "line": 106,
          "column": 41
        },
        "end": {
          "line": 106,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4409,
      "end": 4410,
      "loc": {
        "start": {
          "line": 106,
          "column": 42
        },
        "end": {
          "line": 106,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4411,
      "end": 4412,
      "loc": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4413,
      "end": 4413,
      "loc": {
        "start": {
          "line": 108,
          "column": 0
        },
        "end": {
          "line": 108,
          "column": 0
        }
      }
    }
  ]
}