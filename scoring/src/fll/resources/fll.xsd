<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns="" elementFormDefault="qualified">
 <xsd:element name="fll">
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element ref="Performance" />
    <xsd:element ref="subjectiveCategory" minOccurs="0"
     maxOccurs="unbounded" />
   </xsd:sequence>
   <xsd:attribute name="title" type="xsd:string" use="required" />
   <xsd:attribute name="revision" type="xsd:string" use="optional" />
   <xsd:attribute name="bracketSort" type="bracketSortType"
    default="SEEDING">
    <xsd:annotation>
     <xsd:documentation>
      The sort type for the brackets. Defaults to
      "SEEDING", which sorts
      teams based upon the seeding rounds.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>
   <xsd:attribute name="winner" type="highlowType"
    default="HIGH">
    <xsd:annotation>
     <xsd:documentation>
      Determine which scores are "better". Default is
      for high scores to win,
      although one might want to use low scores
      for a golf tournament or
      drag race times.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>
  </xsd:complexType>
 </xsd:element>

 <xsd:simpleType name="bracketSortType">
  <xsd:restriction base="xsd:string">
   <xsd:enumeration value="SEEDING" />
   <xsd:enumeration value="ALPHA_TEAM" />
   <xsd:enumeration value="RANDOM" />
  </xsd:restriction>
 </xsd:simpleType>

 <xsd:element name="Performance">
  <xsd:complexType>
   <xsd:sequence>
     <xsd:sequence maxOccurs="unbounded">
       
       <xsd:sequence minOccurs="0" maxOccurs="unbounded">
	 <xsd:element ref="goal" minOccurs="0" maxOccurs="unbounded" />
	 <xsd:element ref="computedGoal" minOccurs="0"
		      maxOccurs="unbounded" />
	 <xsd:element ref="restriction" minOccurs="0" maxOccurs="unbounded" />
       </xsd:sequence>
       
       <xsd:element ref="tiebreaker" minOccurs="0" maxOccurs="1" />
    </xsd:sequence>
   </xsd:sequence>
   <xsd:attribute name="minimumScore" type="xsd:decimal"
    default="0">
    <xsd:annotation>
     <xsd:documentation>
      minimum score allowed in the performance scoring
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

   <xsd:attribute name="weight" type="xsd:float" default="1.0">
    <xsd:annotation>
     <xsd:documentation>
      Weight this category has. Should be a number
      between 0 and 1.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

  </xsd:complexType>
  <xsd:key name="performanceGoalKey">
   <xsd:annotation>
    <xsd:documentation>
     All performance goal names must be unique.
    </xsd:documentation>
   </xsd:annotation>
   <xsd:selector xpath="./goal|./computedGoal" />
   <xsd:field xpath="@name" />
  </xsd:key>
  <xsd:keyref name="performanceGoalRef" refer="performanceGoalKey">
   <xsd:selector xpath=".//term|.//goalRef" />
   <xsd:field xpath="@goal" />
  </xsd:keyref>
 </xsd:element>

 <xsd:element name="subjectiveCategory">
  <xsd:complexType>
   <xsd:sequence maxOccurs="unbounded">
    <xsd:sequence minOccurs="0" maxOccurs="unbounded">
     <xsd:element ref="goal" maxOccurs="unbounded" />
     <xsd:element ref="computedGoal" minOccurs="0"
      maxOccurs="unbounded" />
    </xsd:sequence>
   </xsd:sequence>
   <xsd:attribute name="name" type="databaseName" use="required" />
   <xsd:attribute name="title" type="xsd:string" use="required" />

   <xsd:attribute name="weight" type="xsd:float" default="1.0">
    <xsd:annotation>
     <xsd:documentation>
      Weight this category has. Should be a number
      between 0 and 1.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>
  </xsd:complexType>
  <xsd:key name="subjectiveGoalKey">
   <xsd:annotation>
    <xsd:documentation>
     All subjective goal names must be unique within a
     category.
    </xsd:documentation>
   </xsd:annotation>
   <xsd:selector xpath="./goal|./computedGoal" />
   <xsd:field xpath="@name" />
  </xsd:key>
  <xsd:keyref name="subjectiveGoalRef" refer="subjectiveGoalKey">
   <xsd:selector xpath=".//term|.//goalRef" />
   <xsd:field xpath="@goal" />
  </xsd:keyref>
 </xsd:element>

 <xsd:element name="rubric">
  <xsd:annotation>
   <xsd:documentation>
    The rubric for a goal. Each rubric contains
    multiple ranges with
    descriptions.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element name="range" minOccurs="1" maxOccurs="unbounded">
     <xsd:complexType>
      <xsd:sequence>

       <xsd:element name="description" minOccurs="1"
        maxOccurs="1" type="xsd:string"></xsd:element>

      </xsd:sequence>

      <xsd:attribute name="title" type="xsd:string" use="required" />
      <xsd:attribute name="min" type="xsd:nonNegativeInteger"
       use="required" />
      <xsd:attribute name="max" type="xsd:nonNegativeInteger"
       use="required" />
     </xsd:complexType>
    </xsd:element> <!-- end range -->

   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>


 <xsd:element name="goal">
  <xsd:annotation>
   <xsd:documentation>
    A goal is something that the team may be scored
    on. A goal has a
    maximum and a minimum that define what values are
    allowed. It also
    has a multiplier for cases where this goal is used
    to count things.
    If there are no value child elements, then the score
    is determined
    by multiplying the count, in the range min to max, by
    the
    multiplier. If there are child elements, the score is the score
    associated with the chosen child element times the multiplier.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>

    <xsd:element name="description" minOccurs="0" maxOccurs="1"
     type="xsd:string" />
    <xsd:element ref="rubric" minOccurs="0" maxOccurs="1" />

    <xsd:element name="value" minOccurs="0" maxOccurs="unbounded">
     <xsd:complexType>
      <xsd:attribute name="score" type="xsd:decimal"
       default="0">
       <xsd:annotation>
        <xsd:documentation>
         The raw score one gets for this value of an
         enumerated goal.
        </xsd:documentation>
       </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="title" type="xsd:string" use="required">
       <xsd:annotation>
        <xsd:documentation>
         The title to display for this value.
        </xsd:documentation>
       </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="value" type="xsd:string" use="required">
       <xsd:annotation>
        <xsd:documentation>
         The value to store in the database for this
         value.
        </xsd:documentation>
       </xsd:annotation>
      </xsd:attribute>
     </xsd:complexType>
    </xsd:element>


   </xsd:sequence>
   <xsd:attribute name="name" type="databaseName" use="required" />

   <xsd:attribute name="title" type="xsd:string" use="required" />

   <xsd:attribute name="min" type="xsd:decimal" default="0">
    <xsd:annotation>
     <xsd:documentation>
      The minimum raw score for this goal. Ignored if
      enumerated values
      exist
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

   <xsd:attribute name="max" type="xsd:decimal" default="1">
    <xsd:annotation>
     <xsd:documentation>
      The maximum raw score for this goal. Ignored if
      enumerated values
      exist
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

   <xsd:attribute name="multiplier" type="xsd:decimal"
    default="1" />

   <xsd:attribute name="initialValue" type="xsd:decimal"
    default="0">
    <xsd:annotation>
     <xsd:documentation>
      Used to initialize the counters in the score
      entry web page.
      Ignored for subjective goals.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

   <xsd:attribute name="scoreType" type="scoreType"
    default="INTEGER">
    <xsd:annotation>
     <xsd:documentation>
      Specifies the type of number allowed for this
      goal value.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>

   <xsd:attribute name="category" type="xsd:string" use="optional">
    <xsd:annotation>
     <xsd:documentation>
      The category that this goal is in. This is a way
      to group goals.
     </xsd:documentation>
    </xsd:annotation>
   </xsd:attribute>
  </xsd:complexType>
 </xsd:element>

 <xsd:simpleType name="scoreType">
  <xsd:restriction base="xsd:string">
   <xsd:enumeration value='FLOAT' />
   <xsd:enumeration value='INTEGER' />
  </xsd:restriction>
 </xsd:simpleType>

 <xsd:element name="restriction">
  <xsd:annotation>
   <xsd:documentation>
    A polynomial with an upper and lower bound used to
    determine if the
    restriction is violated. Lower bound and upper bound
    are inclusive.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="polynomial">
     <xsd:attribute name="lowerBound" type="xsd:decimal"
      default="-512" />
     <xsd:attribute name="upperBound" type="xsd:decimal"
      default="512" />
     <xsd:attribute name="message" type="xsd:string" use="required" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="term">
  <xsd:complexType>
   <xsd:attribute name="coefficient" type="xsd:decimal"
    default="1" />
   <xsd:attribute name="goal" type="databaseName" use="required" />
   <xsd:attribute name="scoreType" type="goalScoreType"
    use="required" />
   <xsd:attribute name="floatingPoint" type="floatingPointType"
    default="truncate" />
  </xsd:complexType>
 </xsd:element>

 <xsd:simpleType name="goalScoreType">
  <xsd:annotation>
   <xsd:documentation>
    What score from the goal should be used? The 'raw'
    score or the
    'computed' score. Default is set to 'computed' to
    support backwards
    compatibility
   </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
   <xsd:enumeration value='computed' />
   <xsd:enumeration value='raw' />
  </xsd:restriction>
 </xsd:simpleType>

 <xsd:simpleType name="floatingPointType">
  <xsd:annotation>
   <xsd:documentation>
    How floating point data should be handled for an
    operation. If set
    to 'decimal', then just compute floating point
    values. If set to
    'round', then round the value to the nearest
    integer. If set to
    'truncate', then truncate the value. Default is
    set to 'truncate'
    for the standard usage for most tournaments.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
   <xsd:enumeration value='decimal' />
   <xsd:enumeration value='round' />
   <xsd:enumeration value='truncate' />
  </xsd:restriction>
 </xsd:simpleType>

 <xsd:element name="tiebreaker">
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element name="test" maxOccurs="unbounded">
     <xsd:complexType>
      <xsd:annotation>
       <xsd:documentation>
        Need to add a winner attribute to the
        polynomial to be able to
        determine the winner of a tiebreaker.
       </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
       <xsd:extension base="polynomial">
        <xsd:attribute name="winner" type="highlowType"
         use="required" />
       </xsd:extension>
      </xsd:complexContent>
     </xsd:complexType>
    </xsd:element>
   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>

 <xsd:complexType name="polynomial">
  <xsd:annotation>
   <xsd:documentation>
    A simple polynomial to be used in multiple places.
    Terms and
    constants are allowed in a polynomial.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:sequence minOccurs="0" maxOccurs="unbounded">
   <xsd:element ref="term" minOccurs="0" maxOccurs="unbounded" />
   <xsd:element name="constant" minOccurs="0" maxOccurs="unbounded">
    <xsd:complexType>
     <xsd:attribute name="value" type="xsd:decimal" />
    </xsd:complexType>
   </xsd:element>
  </xsd:sequence>
 </xsd:complexType>

 <xsd:complexType name="polynomialWithVariables">
  <xsd:annotation>
   <xsd:documentation>
    A polynomial that can have variables references.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexContent>
   <xsd:extension base="polynomial">
    <xsd:sequence minOccurs="0" maxOccurs="unbounded">
     <xsd:element ref="variableRef" minOccurs="0" maxOccurs="unbounded" />
    </xsd:sequence>
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>

 <xsd:element name="variableRef">
  <xsd:complexType>
   <xsd:attribute name="coefficient" type="xsd:decimal"
    default="1" />
   <xsd:attribute name="variable" type="databaseName" use="required" />
   <xsd:attribute name="floatingPoint" type="floatingPointType"
    default="truncate" />
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="computedGoal">
  <xsd:annotation>
   <xsd:documentation>
    A computed goal contains 0 or more variable
    declarations and then a
    switch statement.
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element ref="variable" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element ref="switch" />
   </xsd:sequence>
   <xsd:attribute name="name" type="databaseName" use="required" />
   <xsd:attribute name="title" type="xsd:string" use="required" />
   <xsd:attribute name="description" type="xsd:string" />
  </xsd:complexType>
  <xsd:key name="variableKey">
   <xsd:annotation>
    <xsd:documentation>
     All variable names must be unique.
    </xsd:documentation>
   </xsd:annotation>
   <xsd:selector xpath="./variable" />
   <xsd:field xpath="@name" />
  </xsd:key>
  <xsd:keyref name="variableRef" refer="variableKey">
   <xsd:selector xpath=".//variableRef" />
   <xsd:field xpath="@variable" />
  </xsd:keyref>
 </xsd:element>

 <xsd:element name="switch">
  <xsd:annotation>
   <xsd:documentation>
    A switch statement has 0 or more cases and a
    default
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element ref="case" minOccurs="0" maxOccurs="unbounded" />
    <xsd:element name="default" type="polynomialWithVariables" />
   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="variable">
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="polynomial">
     <xsd:attribute name="name" type="xsd:string" use="required" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="case">
  <xsd:annotation>
   <xsd:documentation>
    A case has a condition and a result or a switch
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:choice>
     <xsd:element ref="condition" />
     <xsd:element ref="enumCondition" />
    </xsd:choice>
    <xsd:choice>
     <xsd:element name="result" type="polynomialWithVariables" />
     <xsd:element ref="switch" />
    </xsd:choice>
   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="condition">
  <xsd:annotation>
   <xsd:documentation>
    The condition for a case in a switch. A condition
    represents an
    inequality test that evaluates to a boolean. This is a
    comparison of
    two numbers (represented as polynomials).
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element name="left" type="polynomialWithVariables" />
    <xsd:choice>
     <xsd:element name="less-than" />
     <xsd:element name="less-than-or-equal" />
     <xsd:element name="greater-than" />
     <xsd:element name="greater-than-or-equal" />
     <xsd:element name="equal-to" />
     <xsd:element name="not-equal-to" />
    </xsd:choice>
    <xsd:element name="right" type="polynomialWithVariables" />
   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>

 <xsd:element name="enumCondition">
  <xsd:annotation>
   <xsd:documentation>
    A comparison of the value of an enumerated goal
    and a string
   </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:sequence>
    <xsd:element name="left" type="stringOrGoalRef" />
    <xsd:choice>
     <xsd:element name="equal-to" />
     <xsd:element name="not-equal-to" />
    </xsd:choice>
    <xsd:element name="right" type="stringOrGoalRef" />
   </xsd:sequence>
  </xsd:complexType>
 </xsd:element>

 <xsd:complexType name="stringOrGoalRef">
  <xsd:sequence>
   <xsd:choice>
    <xsd:element name="goalRef">
     <xsd:complexType>
      <xsd:attribute name="goal" type="databaseName" use="required" />
     </xsd:complexType>
    </xsd:element>
    <xsd:element name="stringConstant">
     <xsd:complexType>
      <xsd:attribute name="value" type="xsd:string" use="required" />
     </xsd:complexType>
    </xsd:element>
   </xsd:choice>
  </xsd:sequence>
 </xsd:complexType>

 <xsd:simpleType name="databaseName">
  <xsd:restriction base="xsd:string">
   <xsd:pattern value="\p{L}[\p{L}\p{Nd}_]*" />
  </xsd:restriction>
 </xsd:simpleType>

 <xsd:simpleType name="highlowType">
  <xsd:restriction base="xsd:string">
   <xsd:enumeration value="HIGH" />
   <xsd:enumeration value="LOW" />

   <!-- deprecated -->
   <xsd:enumeration value="high" />
   <xsd:enumeration value="low" />

  </xsd:restriction>
 </xsd:simpleType>

</xsd:schema>
