<project name="fll-sw" default="compile">

	<!--
  ===================== Property Definitions ===========================
  -->

	<!-- load build specific properties first -->
	<property file="override.properties" />

	<property name="app.name" value="${ant.project.name}" />

	<property name="dir.build" value="${basedir}/build" />
	<property name="dir.tomcat" value="${dir.build}/tomcat" />
	<property name="dir.tomcat.src" value="${basedir}/tools/tomcat" />

	<property name="dir.dist" value="dist" />
	<property name="dir.web" value="${dir.tomcat}/webapps/${app.name}" />
	<property name="tmp.dir.web" value="${basedir}/tmp-web" />

	<property name="dir.classes" value="${dir.web}/WEB-INF/classes" />

	<property name="dir.lib" value="${basedir}/lib" />
	<property name="dir.src" value="${basedir}/src" />

	<property name="dir.test.unit" value="test-unit" />
	<property name="dir.test.integration" value="test-integration" />

	<property name="dir.tmp" value="${basedir}/tmp" />
	<property name="dir.src.jsp" value="${dir.build}/jsp_source" />

	<property name="dir.tools" value="${basedir}/tools" />

	<property name="dir.reports" value="${dir.build}/docs/reports" />
	<property name="dir.coverage" value="${dir.build}/coverage" />

	<property name="findbugs.home" value="${dir.lib}/findbugs-3.0.1" />
	<property name="dir.lib.findbugs" value="${findbugs.home}/lib" />

	<property name="coverage.dir.web" value="${dir.tomcat}/webapps/TEST-${app.name}" />
	<property name="coverage.dir.classes" value="${coverage.dir.web}/WEB-INF/classes" />

	<import file="${basedir}/buildscript-imports.xml" />

	<taskdef name="findbugs" classpath="${dir.lib.findbugs}/findbugs-ant.jar" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />

	<property name="launch4j.dir" location="${dir.tools}/launch4j" />
	<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
          :${launch4j.dir}/lib/xstream.jar" />


	<taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask">
		<classpath>
			<pathelement location="${dir.lib}/ant/one-jar-ant-task-0.97.jar" />
		</classpath>
	</taskdef>

	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
		<classpath>
			<fileset dir="${dir.lib}/ant/pmd">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<!--
  ==================== Compilation Control Options ====================
  -->

	<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task. compile.debug Should compilation
  include the debug option? compile.deprecation Should compilation
  include the deprecation option?
  -->

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="true" />

	<!-- ==================== Classpaths =========================== -->
	<path id="cobertura.classpath">
		<pathelement location="${dir.lib}/slf4j-api-1.7.5.jar" />

		<fileset dir="${dir.lib}/cobertura">

			<include name="*.jar" />
			<include name="lib/*.jar" />

			<!-- keep logback out until explicitly added -->
			<exclude name="lib/logback*.jar" />
		</fileset>
	</path>
	<path id="cobertura.task.classpath">
		<path refid="cobertura.classpath" />
		<fileset dir="${dir.lib}/cobertura">
			<include name="lib/logback*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.task.classpath" resource="tasks.properties" />

	<path id="base.classpath">
		<!-- the classpath without the classes dir -->
		<pathelement location="${dir.lib}/xmlunit-1.4.jar" />
		<pathelement location="${dir.lib}/JonsInfra-1.6.jar" />

		<pathelement location="${dir.lib}/commons-lang3-3.4.jar" />

		<!-- command line argument parsing -->
		<pathelement location="${dir.lib}/commons-cli-1.2.jar" />

		<!-- database -->
		<pathelement location="${dir.lib}/hsqldb-2.3.0.jar" />
		<pathelement location="${dir.lib}/log4jdbc4-1.2.jar" />

		<!-- pdf library -->
		<pathelement location="${dir.lib}/itextpdf-5.5.9.jar" />
		<pathelement location="${dir.lib}/itext-xtra-5.5.9.jar" />

		<pathelement location="${dir.lib}/opencsv-jps-2.4.jar" />

		<!-- logging -->
		<pathelement location="${dir.lib}/log4j-1.2.17.jar" />
		<pathelement location="${dir.lib}/slf4j-api-1.7.5.jar" />
		<pathelement location="${dir.lib}/slf4j-log4j12-1.7.5.jar" />

		<!-- icons -->
		<pathelement location="${dir.lib}/jlfgr-1_0.jar" />

		<!-- Read and Write Excel files -->
		<pathelement location="${dir.lib}/poi-3.10-FINAL-20140208.jar" />
		<pathelement location="${dir.lib}/poi-ooxml-3.10-FINAL-20140208.jar" />
		<pathelement location="${dir.lib}/poi-ooxml-schemas-3.10-FINAL-20140208.jar" />
		<pathelement location="${dir.lib}/xmlbeans-2.3.0.jar" />
		<pathelement location="${dir.lib}/commons-logging-1.2.jar" />
		<pathelement location="${dir.lib}/dom4j-1.6.1.jar" />

		<!-- findbugs annotations -->
		<pathelement location="${dir.lib.findbugs}/annotations.jar" />
		<pathelement location="${dir.lib.findbugs}/jsr305.jar" />

		<!-- used for password hashes -->
		<pathelement location="${dir.lib}/commons-codec-1.10.jar" />

		<!-- used to create json out of objects -->
		<pathelement location="${dir.lib}/jackson-annotations-2.9.0.jar" />
		<pathelement location="${dir.lib}/jackson-core-2.9.0.jar" />
		<pathelement location="${dir.lib}/jackson-databind-2.9.0.jar" />

		<pathelement location="${dir.lib}/commons-io-2.5.jar" />

		<!-- writing out database diagrams -->
		<pathelement location="${dir.lib}/schemaSpy_5.0.0.jar" />

		<!-- better dns lookup -->
		<pathelement location="${dir.lib}/dnsjava-2.1.7.jar" />

		<!-- use commons-lang3 -->
		<pathelement location="${dir.lib}/commons-lang3-3.4.jar" />

		<!-- tomcat libraries -->
		<pathelement location="${dir.tomcat.src}/lib/servlet-api.jar" />
		<pathelement location="${dir.tomcat.src}/lib/websocket-api.jar" />
		<pathelement location="${dir.tomcat.src}/lib/jsp-api.jar" />

		<!-- file upload -->
		<pathelement location="${dir.lib}/commons-fileupload-1.3.jar" />

	</path>

	<path id="application.classpath">
		<path refid="base.classpath" />

		<pathelement location="${dir.classes}" />
	</path>

	<path id="test.classpath">
		<path refid="application.classpath" />

		<fileset dir="${dir.lib}/test">
			<include name="**/*.jar" />
		</fileset>

		<pathelement location="${coverage.dir.classes}" />
	</path>

	<!-- ==================== Code coverage ==================== -->
	<target name="coverage.instr" depends="compile" description="Instrument files for code coverage">
		<mkdir dir="${dir.coverage}" />

		<cobertura-instrument datafile="${dir.coverage}/cobertura.ser" todir="${coverage.dir.classes}">
			<auxClasspath>
				<path refid="application.classpath" />
				<path refid="cobertura.classpath" />
			</auxClasspath>
			<fileset dir="${dir.classes}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
		<copy file="${dir.coverage}/cobertura.ser" tofile="${dir.coverage}/tomcat-cobertura.ser" />
	</target>

	<target name="coverage.report" description="Generate coverage report">
		<cobertura-merge datafile="${dir.coverage}/merge-cobertura.ser">
			<fileset dir="${dir.coverage}">
				<include name="cobertura.ser" />
				<include name="tomcat-cobertura.ser" />
			</fileset>
		</cobertura-merge>

		<mkdir dir="${dir.reports}/coverage" />
		<cobertura-report format="html" destdir="${dir.reports}/coverage" datafile="${dir.coverage}/merge-cobertura.ser">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
		<cobertura-report format="xml" destdir="${dir.reports}/coverage" datafile="${dir.coverage}/merge-cobertura.ser">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

		<echo message="See ${dir.reports}/coverage/index.html for the coverage report" />
	</target>

	<!-- ==================== Setup/Prepare/Clean ==================== -->
	<target name="init" depends="git.revision">
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd_HH:mm:ss" />
		</tstamp>

		<tstamp />

		<uptodate property="jsp.notRequired" targetfile="${dir.src.jsp}/.timestamp">
			<srcfiles dir="web" includes="**" />
		</uptodate>

		<!-- set arch -->
		<condition property="arch" value="linux">
			<os name="Linux" />
		</condition>
		<condition property="arch" value="windows">
			<os family="windows" />
		</condition>
		<condition property="arch" value="mac">
			<os family="mac" />
		</condition>
		<condition property="arch" value="other">
			<not>
				<isset property="arch" />
			</not>
		</condition>
		<echo message="arch is ${arch}" />

		<mkdir dir="${dir.build}" />

		<echo message="Long version ${app.version.long} short version ${app.version.short}" />

	</target>

	<!--
  ==================== Clean Target ====================================
  -->
	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${dir.build}" />
		<delete dir="${dir.dist}" />
		<delete dir="${dir.tmp}" />
	</target>



	<!--
  ==================== Compile Target ==================================
  -->

	<target name="compile" depends="copy.web.files,compile.classes,compile.jsp" description="Compile Java sources">

		<!-- copy scripts -->
		<copy todir="${dir.build}/bin">
			<fileset dir="script-templates" />
		</copy>

		<one-jar destfile="${dir.web}/subjective-app.jar">
			<manifest>
				<attribute name="One-Jar-Main-Class" value="fll.subjective.SubjectiveFrame" />
			</manifest>
			<main>
				<fileset dir="${dir.web}/WEB-INF/classes" />
			</main>
			<lib>
				<classpath>
					<path refid="base.classpath" />
				</classpath>
			</lib>
		</one-jar>

		<path id="launcher.classpath">
			<!-- these paths will be transformed by the buildscript task -->
			<path refid="base.classpath" />
			<pathelement location="classes" />
		</path>
		<buildscript scripts.dir="${dir.build}" scripts.basedir="${basedir}" scripts.root="tomcat/webapps/fll-sw/WEB-INF" scripts.path="launcher.classpath" script.name="fll-sw" class.main="fll.Launcher" java.args="-Dapp.name=fll-sw -Dlogroot=./" template.name="run" />
		<!-- don't want the windows bat file, want them to use the executable -->
		<delete file="${dir.build}/fll-sw.bat" />

		<!-- create windows executable -->
		<launch4j bindir="${dir.tools}/launch4j/bin-${arch}" tmpdir="${dir.build}" configFile="${basedir}/launch4j.xml" outfile="${dir.build}/fll-sw.exe" fileVersion="${app.version.short}" txtFileVersion="${app.version.long}" productVersion="${app.version.short}" txtProductVersion="${app.version.long}" />

		<!-- copy libraries over -->
		<copy todir="${dir.build}/lib">
			<fileset dir="${dir.lib}" />
		</copy>

		<fix-scripts dir="${dir.build}" />
	</target>

	<macrodef name="fix-scripts" description="Fix script permissions and line endings">
		<attribute name="dir" />

		<sequential>
			<fixcrlf srcdir="@{dir}/bin" includes="*.sh" eol="unix" />
			<fixcrlf srcdir="@{dir}/bin" includes="*.bat" eol="dos" />
			<fixcrlf srcdir="@{dir}/tomcat/bin" includes="*.sh" eol="unix" />
			<fixcrlf srcdir="@{dir}/tomcat/bin" includes="*.bat" eol="dos" />
			<fixcrlf file="@{dir}/fll-sw.sh" eol="unix" />

			<chmod perm="+x">
				<fileset dir="@{dir}/tomcat/bin">
					<include name="*.sh" />
				</fileset>
			</chmod>

			<chmod perm="+x">
				<fileset dir="@{dir}/bin">
					<include name="*.sh" />
				</fileset>
				<fileset dir="@{dir}">
					<include name="fll-sw.sh" />
					<include name="fll-sw.exe" />
				</fileset>
			</chmod>

			<chmod perm="+x">
				<fileset dir="@{dir}">
					<include name="menu-entries/*.sh" />
				</fileset>
			</chmod>

		</sequential>
	</macrodef>

	<macrodef name="compile">
		<attribute name="dir.dest" />
		<attribute name="dir.src" />
		<element name="classpath-elements" />

		<sequential>
			<mkdir dir="@{dir.dest}" />

			<!-- Copy static files from external dependencies as needed -->
			<copy todir="@{dir.dest}">
				<fileset dir="@{dir.src}">
					<exclude name="**/*.java" />
				</fileset>
			</copy>

			<javac includeantruntime="false" srcdir="@{dir.src}" destdir="@{dir.dest}" debug="${compile.debug}" deprecation="${compile.deprecation}">
				<classpath>
					<classpath-elements />
				</classpath>
				<compilerarg value="-Xlint:-serial" />
			</javac>
		</sequential>
	</macrodef>

	<target name="compile.classes" depends="copy.web.files" description="Compile Java sources">
		<compile dir.dest="${dir.classes}" dir.src="${dir.src}">
			<classpath-elements>
				<path refid="application.classpath" />
			</classpath-elements>
		</compile>
	</target>

	<target name="compile.test.all" depends="compile.test.unit, compile.test.integration" description="Compile all tests" />

	<target name="compile.test.unit" depends="copy.web.files,compile" description="Compile the unit tests">
		<compile dir.dest="${coverage.dir.classes}" dir.src="${dir.test.unit}">
			<classpath-elements>
				<path refid="test.classpath" />
			</classpath-elements>
		</compile>
	</target>

	<target name="compile.test.integration" depends="copy.web.files,compile,compile.test.unit" description="Compile the integration tests">
		<compile dir.dest="${coverage.dir.classes}" dir.src="${dir.test.integration}">
			<classpath-elements>
				<path refid="test.classpath" />
			</classpath-elements>
		</compile>
	</target>

	<import file="${dir.tomcat.src}/bin/catalina-tasks.xml" />
	<target name="generate.jsp" depends="copy.web.files" description="Generate Java sources for JSP files" unless="jsp.notRequired">
		<mkdir dir="${dir.src.jsp}" />


		<!-- copy the web directory as the jasper task hangs onto the lib files and prevents clean from executing after this task, thus breaking the dist target -->
		<mkdir dir="${tmp.dir.web}" />
		<copy todir="${tmp.dir.web}">
			<fileset dir="${dir.web}" />
		</copy>

		<mkdir dir="${dir.src.jsp}" />

		<jasper validateXml="false" uriroot="${tmp.dir.web}" webXmlFragment="${dir.src.jsp}/generated_web.xml" outputDir="${dir.src.jsp}" poolingEnabled="false" />

		<delete dir="${tmp.dir.web}" deleteonexit="true" failonerror="false" />

		<touch file="${dir.src.jsp}/.timestamp" />
	</target>

	<target name="compile.jsp" depends="compile.classes,generate.jsp" description="Compile JSP sources">
		<compile dir.src="${dir.src.jsp}" dir.dest="${dir.src.jsp}">
			<classpath-elements>
				<path refid="application.classpath" />
				<fileset dir="${dir.web}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${dir.tomcat}/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${dir.tomcat}/bin">
					<include name="*.jar" />
				</fileset>
			</classpath-elements>
		</compile>
	</target>


	<!-- ================ Tomcat Targets =========== -->
	<target name="tomcat.expand" description="copy tomcat to the right place in the build directory">
		<mkdir dir="${dir.tomcat}" />
		<copy todir="${dir.tomcat}">
			<fileset dir="${dir.tomcat.src}" />
		</copy>
	</target>

	<target name="reload" description="alias for tomcat.reload" depends="tomcat.reload" />
	<target name="tomcat.reload" description="Load new code into tomcat">
		<antcall target="tomcat.stop" />
		<antcall target="tomcat.start" />
	</target>

	<target name="start" description="alias for tomcat.start" depends="tomcat.start" />
	<target name="tomcat.start" depends="tomcat.expand,compile" description="Compile and start up tomcat">
		<echo message="Starting tomcat" />
		<run-tomcat operation="start" spawn="true" />

		<echo message="Waiting for tomcat to startup" />
		<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000" checkeveryunit="millisecond" timeoutproperty="fll-sw.timeout">
			<http url="http://localhost:9080/" />
		</waitfor>
		<fail message="Access to timed out to http://localhost:9080/ " if="fll-sw.timeout" />
	</target>

	<target name="stop" description="alias for tomcat.stop" depends="tomcat.stop" />
	<target name="tomcat.stop" depends="tomcat.expand" description="shut down tomcat">
		<echo message="Shutting down tomcat" />
		<run-tomcat operation="stop" spawn="false" />

		<echo message="Waiting for tomcat to shutdown" />
		<waitfor maxwait="5" maxwaitunit="minute" checkevery="1000" checkeveryunit="millisecond">
			<not>
				<http url="http://localhost:9080/" />
			</not>
		</waitfor>
	</target>

	<macrodef name="run-tomcat">
		<attribute name="spawn" />
		<attribute name="operation" />

		<sequential>
			<java classname="org.apache.catalina.startup.Bootstrap" fork="true" spawn="@{spawn}" taskname="tomcat">
				<sysproperty key="net.sourceforge.cobertura.datafile" value="${dir.coverage}/tomcat-cobertura.ser" />

				<classpath>
					<!-- tomcat jars -->
					<pathelement location="${dir.tomcat}/bin/bootstrap.jar" />
					<pathelement location="${dir.tomcat}/bin/tomcat-juli.jar" />

					<!-- for running instrumented unit tests -->
					<path id="cobertura.classpath" />

				</classpath>
				<sysproperty key="java.util.logging.manager" value="org.apache.juli.ClassLoaderLogManager" />
				<sysproperty key="java.util.logging.config.file" file="${dir.tomcat}/conf/logging.properties" />
				<sysproperty key="java.endorsed.dirs" file="${dir.tomcat}/common/endorsed" />
				<sysproperty key="catalina.base" file="${dir.tomcat}" />
				<sysproperty key="catalina.home" file="${dir.tomcat}" />
				<sysproperty key="java.io.tmpdir" file="${dir.tomcat}/temp" />

				<arg line="@{operation}" />
			</java>
		</sequential>
	</macrodef>


	<!--
  ==================== Dist Target =====================================
  -->
	<target name="dist" description="Create distribution">
		<!-- ensure things are clean before testing -->
		<antcall target="clean" />
		<!-- make sure the tests pass -->
		<antcall target="test.all.pass" />


		<!--
    create & copy the coverage & test reports to the side so that the
    clean doesn't remove it
    -->
		<antcall target="coverage.report" />
		<antcall target="test.report" />
		<mkdir dir="dist-save" />
		<copy todir="dist-save">
			<fileset dir="${dir.reports}" />
		</copy>

		<!-- Let the filesystem catch up -->
		<sleep minutes="1" />

		<!-- clean everything out before a distribution is made -->
		<antcall target="clean" />

		<!-- copy the reports back -->
		<mkdir dir="${dir.reports}" />
		<copy todir="${dir.reports}">
			<fileset dir="dist-save" />
		</copy>
		<delete dir="dist-save" />

		<antcall target="dist.real" />
	</target>

	<target name="docs" depends="javadoc,doc.workflow.generate,doc.wiki.render,doc.database-diagram" description="Generate all documentation">
		<copy todir="${basedir}/docs" file="${basedir}/web/documentation/index.html" />
	</target>

	<target name="dist.real" depends="compile,docs">
		<!-- copy docs to the web -->
		<copy todir="${dir.web}/documentation">
			<fileset dir="${basedir}/docs" />
			<fileset dir="${basedir}/..">
				<include name="LICENSE" />
			</fileset>
		</copy>

		<!-- copy docs -->
		<mkdir dir="${dir.dist}/docs" />
		<copy todir="${dir.dist}/docs">
			<fileset dir="${basedir}/docs" />
			<fileset dir="${basedir}/..">
				<include name="LICENSE" />
			</fileset>
		</copy>
		<copy todir="${dir.dist}/docs" file="${basedir}/../Changes.md" />

		<!-- copy reports -->
		<mkdir dir="${dir.dist}/docs/reports" />
		<copy failonerror="false" todir="${dir.dist}/docs/reports">
			<fileset dir="${dir.reports}" />
		</copy>

		<!-- copy scripts -->
		<mkdir dir="${dir.dist}/bin" />
		<copy todir="${dir.dist}/bin">
			<fileset dir="script-templates" />
		</copy>
		<copy todir="${dir.dist}/bin">
			<fileset dir="${dir.build}/bin">
				<include name="*" />
			</fileset>
		</copy>
		<copy todir="${dir.dist}">
			<fileset dir="${dir.build}">
				<include name="fll-sw.exe" />
				<include name="fll-sw.sh" />
			</fileset>
		</copy>

		<!-- copy web stuff -->
		<copy todir="${dir.dist}">
			<fileset dir="${dir.build}">
				<include name="tomcat/**" />
				<exclude name="tomcat/webapps/TEST-${app.name}" />
			</fileset>
		</copy>

		<!-- copy menu entry stuff -->
		<copy todir="${dir.dist}">
			<fileset dir="${basedir}">
				<include name="menu-entries/**" />
			</fileset>
		</copy>

		<fix-scripts dir="${dir.dist}" />

		<zip zipfile="${dir.build}/${app.name}-${app.version.short}.zip">
			<zipfileset dir="${dir.dist}" prefix="${app.name}-${app.version.short}" filemode="755">
				<include name="**/*.sh" />
			</zipfileset>
			<zipfileset dir="${dir.dist}" prefix="${app.name}-${app.version.short}">
				<exclude name="**/*.sh" />
			</zipfileset>
		</zip>
		<echo message="The distribution file is ${dir.build}/${app.name}-${app.version.short}.zip" />
	</target>

	<!--
  ==================== Javadoc Target ==================================
  -->
	<target name="javadoc" description="Create Javadoc API documentation">

		<mkdir dir="${basedir}/docs/api" />
		<javadoc sourcepath="src" windowtitle="${app.name}" destdir="${basedir}/docs/api" packagenames="fll.*" use="true" splitindex="true" breakiterator="yes">
			<classpath>
				<path refid="application.classpath" />
				<pathelement location="${dir.src}" />
			</classpath>

		</javadoc>

	</target>



	<!--
  ==================== Copy web files ==================================
  -->
	<macrodef name="copy-web-files">
		<attribute name="webdir" />

		<sequential>
			<!-- Create build directory and copy static content -->
			<mkdir dir="@{webdir}" />
			<copy todir="@{webdir}">
				<fileset dir="web">
					<exclude name="**/*.java" />
				</fileset>
			</copy>

			<!-- Copy static files from external dependencies as needed -->
			<copy todir="@{webdir}/WEB-INF/classes">
				<fileset dir="${dir.src}">
					<exclude name="**/*.java" />
				</fileset>
			</copy>

			<!-- special files that need overwrite -->
			<copy todir="@{webdir}" overwrite="true">
				<fileset dir="web">
					<include name="**/*.appcache" />
					<include name="**/subjective.js" />
				</fileset>
				<filterset>
					<filter token="APP-VERSION" value="${app.version.long}" />
					<filter token="TODAY" value="${TODAY}" />
				</filterset>
			</copy>
			<copy todir="@{webdir}/WEB-INF/classes" overwrite="true">
				<fileset dir="${dir.src}">
					<include name="**/version.properties" />
				</fileset>
				<filterset>
					<filter token="APP-VERSION" value="${app.version.long}" />
					<filter token="TODAY" value="${TODAY}" />
				</filterset>
			</copy>

			<copy todir="@{webdir}/WEB-INF/lib">
				<fileset dir="${dir.lib}">
					<include name="*.jar" />
				</fileset>
			</copy>
			<copy todir="@{webdir}/WEB-INF/lib">
				<fileset dir="${dir.lib}/cobertura">
					<include name="*.jar" />
				</fileset>
			</copy>
			<copy todir="@{webdir}/WEB-INF/lib">
				<fileset dir="${dir.lib.findbugs}">
					<include name="annotations.jar" />
					<include name="jsr305.jar" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>


	<target name="copy.web.files" depends="init,tomcat.expand" description="prepare the web directory">
		<copy-web-files webdir="${dir.web}" />
	</target>

	<target name="coverage.copy.web.files" depends="init,tomcat.expand" description="prepare the coverage web directory">
		<copy-web-files webdir="${coverage.dir.web}" />
	</target>

	<!-- ==================== Tests  ==================== -->
	<macrodef name="delete-database">
		<sequential>
			<!-- give the operating system a chance to release locks -->
			<sleep seconds="1" />

			<!-- delete existing database -->
			<delete failonerror="false" deleteonexit="true">
				<fileset dir="${dir.web}/WEB-INF">
					<include name="flldb.*" />
				</fileset>
			</delete>
		</sequential>
	</macrodef>

	<target name="test.all" depends="test.unit,test.integration" description="Run all tests" />

	<target name="test.all.pass" depends="test.all" description="Run all tests and fail if any tests fail">
		<fail message="Some tests failed. Use test.report to generate a nice report to check" if="test.failed" />
	</target>

	<target name="test.report" description="Generate the test report">
		<mkdir dir="${dir.reports}/junit" />
		<junitreport todir="${dir.reports}">
			<fileset dir="${dir.build}/test-results">
				<include name="**/*.xml" />
			</fileset>
			<report format="frames" todir="${dir.reports}/junit" />
		</junitreport>
		<echo message="See ${dir.reports}/junit/index.html to see the unit test results" />
	</target>

	<target name="before-checkin" depends="compile.test.all,test.unit,test.report" description="Run before a checkin">
		<fail message="Some tests failed. See the test report for what failed and why." if="test.failed" />
	</target>

	<macrodef name="run-tests">
		<attribute name="working-dir" />
		<attribute name="dir.src" />

		<sequential>
			<delete-database />

			<mkdir dir="${dir.build}/screenshots" />
			<touch file="${dir.build}/screenshots/dummy.txt" />

			<mkdir dir="${dir.build}/test-results" />

			<junit fork="yes" haltonfailure="false" dir="@{working-dir}" failureproperty="test.failed">
				<sysproperty key="net.sourceforge.cobertura.datafile" value="${dir.coverage}/cobertura.ser" />

				<classpath>
					<path refid="test.classpath" />
				</classpath>

				<formatter type="brief" usefile="false" />
				<formatter type="xml" />
				<batchtest todir="${dir.build}/test-results">
					<fileset dir="@{dir.src}" includes="**/*.java">
						<contains text="@Test" />
					</fileset>
				</batchtest>
			</junit>

			<delete-database />
		</sequential>
	</macrodef>

	<!-- one shot tests -->
	<target name="test.single" depends="compile,compile.test.all" description="Run a single unit test specified by junit.test.class property.">
		<antcall target="tomcat.start" />
		<delete-database />

		<mkdir dir="${dir.build}/screenshots" />

		<junit fork="yes" haltonfailure="false" dir="${dir.build}" failureproperty="test.failed">

			<classpath>
				<path refid="test.classpath" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="${junit.test.class}" if="junit.test.class" todir="${dir.build}/test-results" />
		</junit>

		<antcall target="tomcat.stop" />
	</target>

	<!-- unit tests -->
	<target name="test.unit" depends="compile,compile.test.unit,coverage.instr" description="Run the unit tests">
		<run-tests working-dir="${dir.build}" dir.src="${dir.test.unit}" />
	</target>

	<!-- integration tests -->
	<target name="test.integration" depends="compile,compile.test.integration,coverage.instr,coverage.copy.web.files" description="Run the integration tests">

		<!-- setup cobertura flush application -->
		<copy file="${dir.lib}/cobertura/coberturaFlush.war" todir="${dir.tomcat}/webapps" />

		<antcall target="tomcat.start" />

		<run-tests working-dir="${dir.build}" dir.src="${dir.test.integration}" />

		<!-- force cobertura information to be written -->
		<get src="http://localhost:9080/coberturaFlush/flushCobertura" dest="${dir.build}" />

		<antcall target="tomcat.stop" />
	</target>

	<target name="sloccount" description="Run sloccount on the code">
		<exec executable="cloc" dir="${basedir}">
			<arg value="--by-file" />
			<arg value="--xml" />
			<arg value="--out=${basedir}/cloc.xml" />
			<arg value="src" />
			<arg value="test-integration" />
			<arg value="test-unit" />
			<arg value="web" />
		</exec>

		<xslt style="${basedir}/cloc2sloccount.xsl" in="${basedir}/cloc.xml" out="${basedir}/sloccount.sc">
		</xslt>
	</target>

	<target name="doc.workflow.generate" description="Generate the workflow documents">
		<apply executable="dot" dest="${basedir}/docs/workflows">
			<arg value="-Tpdf" />
			<arg value="-O" />

			<fileset dir="${basedir}/docs/workflows">
				<include name="*.dot" />
			</fileset>

			<mapper type="glob" from="*.dot" to="*.dot.pdf" />
		</apply>
	</target>

	<target name="doc.wiki.render" description="Convert the wiki documentation from markdown to html">
		<apply executable="python" dest="${basedir}/docs" failonerror="true">
			<arg value="${basedir}/scripts/markdown-to-html.py" />

			<fileset dir="${basedir}/docs/">
				<include name="*.md" />
			</fileset>

			<mapper type="glob" from="*.md" to="*.html" />

		</apply>

	</target>

	<target name="doc.database-diagram" description="Generate database diagram" depends="compile">
		<!-- need fork set to true otherwise the classloader inside SchemaSpy doesn't see the database drive -->
		<java classname="fll.db.GenerateDatabaseDiagram" taskname="SchemaSpy" classpathref="application.classpath" fork="true" failonerror="true">
			<arg line="${basedir}/docs/database-diagram" />
		</java>
	</target>

	<target name="tomcat.check-logs" description="Check for errors in the tomcat logs">
		<fileset id="matches" dir="${dir.tomcat}/logs">
			<patternset id="files">
				<include name="localhost*.log" />
			</patternset>
			<containsregexp expression="(SEVERE)|(ERROR)" />
		</fileset>

		<fail message="Errors found in the tomcat logs">
			<condition>
				<resourcecount when="greater" count="0" refid="matches" />
			</condition>
		</fail>

	</target>

	<target name="continuous" description="Runs the continuous integration build">
		<antcall target="clean" />
		<antcall target="cpd.xml" />
		<antcall target="sloccount" />
		<antcall target="docs" />
		<antcall target="findbugs" />
		<antcall target="test.all" />
		<antcall target="tomcat.check-logs" />
		<antcall target="coverage.report" />
	</target>

	<target name="findbugs" depends="compile" description="Executes findbugs to look for problems in the source.">
		<mkdir dir="${dir.build}/findbugs" />
		<findbugs home="${findbugs.home}" output="xml" outputFile="${dir.build}/findbugs/report.xml" effort="max" jvmargs="-Xmx1024m" reportLevel="low" excludeFilter="${basedir}/findbugs-filters.xml">
			<auxClasspath refid="application.classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.classes}" />
		</findbugs>
	</target>

	<target name="findbugs.html" depends="compile" description="Executes findbugs to look for problems in the source.">
		<mkdir dir="${dir.build}/findbugs" />
		<findbugs home="${findbugs.home}" output="html" outputFile="${dir.build}/findbugs/report.html" effort="max" jvmargs="-Xmx1024m" reportLevel="low" excludeFilter="${basedir}/findbugs-filters.xml">
			<auxClasspath refid="application.classpath" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.classes}" />
		</findbugs>
		<echo message="See ${dir.build}/findbugs/report.html for the findbugs report" />
	</target>

	<target name="cpd.text" description="Run Copy Paste Detector on the source and produce a text output" depends="init">
		<cpd minimumTokenCount="100" outputFile="${dir.build}/cpd.txt" format="text">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
		<echo message="See ${dir.build}/cpd.txt for the copy paste report" />
	</target>

	<target name="cpd.xml" description="Run Copy Paste Detector on the source and produce an XML output" depends="init">
		<cpd minimumTokenCount="100" outputFile="${dir.build}/cpd.xml" format="xml">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
	</target>

	<target name="git.revision" description="Store git revision in ${app.version.long} and tag into ${app.version.short}">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--always" />
			<arg value="HEAD" />
		</exec>
		<condition property="app.version.long" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>

		<exec executable="git" outputproperty="git.tag" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--abbrev=0" />
			<arg value="HEAD" />
		</exec>

		<exec executable="git" outputproperty="git.commits-since-tag" failifexecutionfails="false" errorproperty="">
			<arg value="rev-list" />
			<arg value="--count" />
			<arg value="${git.tag}..HEAD" />
		</exec>

		<condition property="app.version.short" value="${git.tag}.${git.commits-since-tag}" else="0.0.0.0">
			<and>
				<isset property="git.tag" />
				<length string="${git.tag}" trim="yes" length="0" when="greater" />
				<isset property="git.commits-since-tag" />
				<length string="${git.commits-since-tag}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
	</target>

</project>
