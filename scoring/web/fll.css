* {
	display: block;
	margin: 10pt;
	font-family: Comic SANS MS, fantasy, times, serif;
	text-align: left;
}

fll:before {
	margin-bottom: 200%;
	font-size: 200%;
	text-align: center;
	content: attr(title) " Revision: " attr(revision) " - Playoff brackets sorted by " attr(bracketSort) " - Scores sorted by " attr(winner)	
}

goal:before {
	content: "Goal: '" attr(title) "' [" attr(name) "] min: " attr(min) " max: " attr(max) " multiplier: " attr(multiplier);
  font-size: 120%;
}
goal[category]:before {
	content: "Goal: '" attr(title) "' [" attr(name) "] category: '" attr(category) "' min: " attr(min) " max: " attr(max) " multiplier: " attr(multiplier);
  font-size: 120%;
}

description {
  display: block
}

rubric {
  display: table;
  border: 2px solid;
}
rubric * {
  display: table-cell;
  padding: 5px;
}
range:before {
  content: attr(title)" (" attr(min) " - " attr(max) ")";
  font-weight: bold;
  text-align: center;
  display: table-caption;
}
range {
  border: 2px solid;
}
  
value:before {
	content: "    Enum Value: '" attr(title) "' [" attr(value) "] score: " attr(score);
}
	
stringConstant:before {
	content: "'" attr(value) "'";
}

enumGoalRef:before {
	content: attr(goal);
}

computedGoal:before {
	content: "Computed Goal: '" attr(title) "' [" attr(name) "]";
}

default:before {
	content: "} else {";
}
default:after {
	content: "}";
}

enumCondition * {
	display: inline;
	margin-right: 0pt;
	margin-left: 0pt;
}
enumCondition:after {
	content: ") {";
}

case>* {
	display: inline;
	margin-right: 0pt;
	margin-left: 0pt;
}
		
condition * {
	display: inline;
	margin-right: 0pt;
	margin-left: 0pt;
}

case:first-child:before {
	content: "if (";
}

case:before {
	content: "} else if (";
}
condition:after {
	content: ") {";
}
equal-to:before {
	content: " == ";
}
not-equal-to:before {
	content: " != ";
}
less-than:before {
	content: " < ";
}
less-than-or-equal:before {
	content: " <= ";
}
greater-than:before {
	content: " > ";
}
greater-than-or-equal:before {
	content: " >= ";
}

restriction * {
	display: inline;
	margin-right: 0pt;
	margin-left: 0pt;
}

restriction:before {
	content: "Restriction: " attr(lowerBound) " <= ";
}

restriction:after {
	content: " <= " attr(upperBound);
}

tiebreaker:before {
	content: "Tiebreaker";
	counter-reset: tiebreaker;
}

test:before {
	content: counter(tiebreaker) ". Team with the " attr(winner) " score wins";
	counter-increment: tiebreaker;
}

Performance:before {
	content: "Performance weight: " attr(weight);
  	font-size: 120%;
  font-weight: bold;
}

subjectiveCategory:before {
	content: attr(title) " weight: " attr(weight);
  	font-size: 120%;
  font-weight: bold;
}


term:before {
	content:  attr(floatingPointType) "(";
}

term:not(:last-child):after {
  content: ") + ";
}

result {
	display: block;
}

result * {
	display: inline;
}


goalRef:before {
    content: attr(scoreType) "(" attr(goal) ")";
}

goalRef:not(:last-child):after {
    content: " x ";
}

constant:before {
	content: attr(value);
}
constant:not(:last-child):after {
	content: " x ";
}

variableRef:before {
	content: attr(variable);
}
variableRef:not(:last-child):after {
	content: " x ";
}

variable:before {
	content: attr(name) " = ";
}
  